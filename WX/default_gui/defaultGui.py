#!/usr/bin/python
# -*- coding: utf8 -*-

# date:    2017-08-21
# author:  tdchung
# mail:    tdchung.9@gmail.com
#
#           defaultGUI.py
#
# update
# 2019-04-07          1.0           Create
# 2019-04-21          1.1
#
from __future__ import print_function
import wx
import io
import re
import csv
import os
import time
from openpyxl import load_workbook


version = '1.0'

# excel file column name
myExcelFile = "test.xlsx"
EXCEL_COLUMN_NAME_STR = "Test: Test Name"
EXCEL_COLUMN_TEST_STATUS_STR = "Status"

# my define status
MY_STATUS_PASSED = 0x01
MY_STATUS_FAILED = 0x02
MY_STATUS_NO_RUN = 0x04
MY_STATUS_NA = 0x08
MY_STATUS_BLOCKED = 0x10
MY_STATUS_ORTHER = 0x80
MY_STATUS_ALL = 0xff

# my define color
MY_COLOR_BLUE = wx.Colour(51, 51, 255)
MY_COLOR_RED = wx.Colour(255, 51, 51)
MY_COLOR_BLACK = wx.Colour(0, 0, 0)
MY_COLOR_ORANGE = wx.Colour(255, 128, 0)
MY_COLOR_YELLOW = wx.Colour(255, 100, 50)
MY_COLOR_VIOLET = wx.Colour(150, 0, 153)


class MyPrint:
    # TODO: `import logging`
    def __init__(self):
        pass

    @staticmethod
    def debug(string):
        timeString = time.strftime("%Y/%m/%d %H:%M:%S", time.localtime())
        print("%s -- %s --DEBUG--: %s\n" %
              (os.path.basename(__file__), timeString, string))

    @staticmethod
    def info(string):
        timeString = time.strftime("%Y/%m/%d %H:%M:%S", time.localtime())
        print("%s -- %s --INFO--: %s\n" %
              (os.path.basename(__file__), timeString, string))

    @staticmethod
    def error(string):
        timeString = time.strftime("%Y/%m/%d %H:%M:%S", time.localtime())
        print("%s -- %s ===ERROR===: %s\n" %
              (os.path.basename(__file__), timeString, string))

    @staticmethod
    def warn(string):
        timeString = time.strftime("%Y/%m/%d %H:%M:%S", time.localtime())
        print("%s -- %s ==WARNING==: %s\n" %
              (os.path.basename(__file__), timeString, string))


class CsvHandler:

    def __init__(self):
        pass

    # ----------------------------------------------------------------------------------------------
    # create csv file without header from txt file. '\t'
    # ----------------------------------------------------------------------------------------------
    @staticmethod
    def create_csv_no_header_from_txt(txt_file_input, csv_file_output):
        """
        holala
        :param txt_file_input: txt file format
        :param csv_file_output:
        :return:
        """
        with open(txt_file_input, "r") as f:
            txt_data = f.read().splitlines()  # get a list a line
        # print(txt_data)
        with open(csv_file_output, "wb") as csvfile:
            filewriter = csv.writer(
                csvfile, delimiter=',', quoting=csv.QUOTE_MINIMAL)
            for line in range(len(txt_data)):
                filewriter.writerow(txt_data[line].split("\t"))

    # ----------------------------------------------------------------------------------------------
    # create csv file without header from list data. '\t'
    # ----------------------------------------------------------------------------------------------
    @staticmethod
    def create_csv_no_header_from_list_data(data_input, csv_file_output):
        """
        holala
        :param data_input: txt file format
        :param csv_file_output:
        :return:
        """
        # print(data_input)
        with open(csv_file_output, "wb") as csvfile:
            filewriter = csv.writer(
                csvfile, delimiter=',', quoting=csv.QUOTE_MINIMAL)
            for line in range(len(data_input)):
                filewriter.writerow(data_input[line].split("\t"))

    # ----------------------------------------------------------------------------------------------
    # create csv file with header from txt file. '\t'
    # ----------------------------------------------------------------------------------------------
    @staticmethod
    def create_csv_w_header_from_txt(txt_file_input, csv_file_output):
        """
        """
        with open(txt_file_input, "r") as f:
            txt_data = f.read().splitlines()  # get a list a line
        # print(txt_data)
        with open(csv_file_output, 'wb') as outcsv:
            writer = csv.DictWriter(outcsv, fieldnames=["Test Name", "Status"])
            writer.writeheader()
            for line in range(len(txt_data)):
                writer.writerow({"Test Name": txt_data[line].split("\t")[0],
                                 "Status": txt_data[line].split("\t")[1]})

    # ----------------------------------------------------------------------------------------------
    # read_csv_no_header
    # ----------------------------------------------------------------------------------------------
    @staticmethod
    def read_csv_no_header(csv_file_input):
        """
        halo 1
        :param csv_file_input:
        :return:    list data
        """
        data_out = []
        with open(csv_file_input, 'rb') as f:
            reader = csv.reader(f)
            # print(reader)
            for row in reader:
                # print(row)      # print debug
                data_out.append(row)
        return data_out

    # ----------------------------------------------------------------------------------------------
    # read_csv_no_header
    # ----------------------------------------------------------------------------------------------
    @staticmethod
    def read_atlas_results(my_atlas_dir):
        """
        :param my_atlas_dir:
        :return:    list data
        """

        re_search_result = r'(\d{4}-\d{2}-\d{2})\s(\d{2}:\d{2}:\d{2}).(\w+)\s::\s(\w+\s\w+|\w+)'

        # result_file = "%s/atlas/res/results.txt" % my_atlas_dir
        result_file = "%s" % my_atlas_dir
        data = []
        try:
            with open(result_file, "r") as f:
                for line in f:
                    match = re.search(re_search_result, line)
                    if match is not None:
                        # print(match.group(0))
                        # print(match.group(1))
                        # print(match.group(2))
                        # print(match.group(3))
                        # print(match.group(4))
                        result = match.group(4)
                        if match.group(4) == "OK":
                            result = "Passed"
                        elif match.group(4) == "ERROR":
                            result = "Failed"
                        elif match.group(4) == "NOT APPLICABLE":
                            result = "N/A"
                        # if DoINeedTime is True:
                        data_line = "%s\t%s\t%s\t%s" % \
                                    (match.group(1), match.group(
                                        2), match.group(3), result)
                        # else:
                        #     data_line = "%s\t%s" % (match.group(3), result)
                        # print(data_line)
                        data.append(data_line)
        except Exception as e:
            data = []

        return data


class MyExcelQC:

    MyPrint = MyPrint()

    def __init__(self):
        pass

    # ----------------------------------------------------------------------------------------------
    # excel file
    # ----------------------------------------------------------------------------------------------
    def excel_search_name(self, worksheet, col_name):
        """

        :param worksheet:
        :param col_name:
        :return: the column is matched with column name
        """
        # abc = ("ABCDEFGHIJK/LMNOPQRSTUVWXYZ")
        # max_column = worksheet.max_column
        for col in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
            # print("DEBUG: " + col)
            # print("DEBUG: " + worksheet[col+"1"].value)
            if worksheet[col+"1"].value == col_name:
                return col
        return None

    # ----------------------------------------------------------------------------------------------
    # excel file
    # ----------------------------------------------------------------------------------------------
    def excel_get_total_tests(self, worksheet):
        """
        TODO: this function only return max row-1. [Need update] - 13-4-2019: updated.
        :param worksheet:
        :return: total test cases in excel file
        """
        # return worksheet.max_row - 1
        testNameCol = self.excel_search_name(worksheet, EXCEL_COLUMN_NAME_STR)
        i = 1
        # for i in range(1, 200):
        while(1):
            # print(worksheet[testNameCol + str(i+1)].value)
            if worksheet[testNameCol + str(i+1)].value is None:
                return i-1
            i = i + 1

    # ----------------------------------------------------------------------------------------------
    # open an excel file
    # ----------------------------------------------------------------------------------------------
    def open_excel_file(self, file_path=myExcelFile):
        """
        fuction open xlsx
        :param file_path:
        :return: 1, total test cases, 2. list test name and test status
        """
        # check if file not exist
        if not os.path.exists(file_path):
            return -1, []

        wb = load_workbook(file_path)
        self.MyPrint.debug(str(wb))

        # select demo.xlsx
        sheet = wb.active
        self.MyPrint.debug(str(sheet))

        # get max row count
        max_row = sheet.max_row
        self.MyPrint.debug("max row from xlsx file: " + str(max_row))

        # get max column count
        max_column = sheet.max_column
        self.MyPrint.debug("max column from xlsx file: " + str(max_column))

        numTests = self.excel_get_total_tests(sheet)
        self.MyPrint.debug(
            " The total test case from xlsx file: " + str(numTests))
        testNameCol = self.excel_search_name(sheet, EXCEL_COLUMN_NAME_STR)
        testStatusCol = self.excel_search_name(
            sheet, EXCEL_COLUMN_TEST_STATUS_STR)

        # test
        testIssueIdCol = self.excel_search_name(sheet, "IssueID")
        testCommentCol = self.excel_search_name(sheet, "Comment")

        # debug print all value and status
        data_out = []
        # data_only_out = []
        for i in range(numTests):
            data_line = "%s\t%s\t%s" % (i+1, sheet[testNameCol + str(i+2)].value,
                                        sheet[testStatusCol + str(i+2)].value)
            data_line = "%s,%s,%s,%s" % (sheet[testNameCol + str(i+2)].value,
                                         sheet[testStatusCol + str(i+2)].value,
                                         sheet[testIssueIdCol + str(i+2)].value if
                                         sheet[testIssueIdCol + str(i+2)].value else "NULL",
                                         sheet[testCommentCol + str(i+2)].value if
                                         sheet[testCommentCol + str(i+2)].value else "NULL")
            data_out.append(data_line)

        return numTests, data_out


# --------------------------------------------------------------------------------------------------
# ImageClass
# --------------------------------------------------------------------------------------------------
class ImageClass:
    def __init__(self):
        print('ImageClass!! Hello world ...')

    def getIconApp(self):
        return \
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x06\x00\x00\x00szz\xf4\x00\x00\x05\xcfIDATx\xda\xadW\x0bl\x14U\x14=\x85\x80\x18\xb6\xfc\x1b0\xa9\xad!\xa4(\x92\x96j\x08(H\x1a\x8b\x1a\x15\t(R\\\x0c\x8a\x115\x1a0\xa6\xd1\xa8\xd1(\r\xf8\xa1,\x85\x12\n+\x95bm\x0b\x96\x9f\x06c$|\x14\x0c\x9f\x08X\xa2\r\x95\xaf\x08\xe9\x8f~\xa0ew\xba;\xbb;\xcf33ow\xa7\xb3\xdbZmgs;o\xde{\xf3\xee9\xe7\xdd{\xdf4\x01}q\x95b\xc4\xc0\xc1p\xa9^,\xc5"x\xfe\xcb\xab\t}\xe1<%i\xd0\xf1\x82\xe9\xc5i\xf9Uy\x17O\x9c9\x9f\x89e=\x07\xd1;\x00t\x9e\x9c4\xf0\x98k\x9a{|\x8b\xbf\x19\x87\xea~\xc4\xcec\x07O\xa3\x16YX\xd13\x10\xbd\x02\xe0\xd8\x83\xed\x85Y\x1brN5\x1f\xc5\xf7Ww\xe3j\x8b\x0f\xf0r\xa0\x1an\xb8\xf0\x9a\x15\xa8#\x11E\x9e[\x08A\xe5\xb3\x82\x95T\xe9l_(P\xee\xf8\x0bNm2\xd7\xd4\xf9\xd2?N\xd0\x02\xa8\xc0f,\xb4\xaa\x947\xb5`\xfc\xb2\xc27\xe0\x19\x0e\x1dd\x03-\x9b*\x9d\xed\x1d\x80b\x94\x93\x8d\x13\xf5l\x8f\xa3\x9d\x96\xfdm\xd8\xca\x91\xc5\xe1\xf8\xc8\x9f\xb61\xedp\xe3~l\xbdP\x01\xe5\x17\x8e\xf7\x97 <\xc8\xee\x1d\x80BL\xe0B\x07ic\xd0*\xfb\xdaq\x0e~\xc6\xc0\x0e4\x0c\xdc\x85\x92m\x8f\x96\xbd\xd8\xe8\xab\xc7g\xbf\x7fhn\xd1-\x0b\xd0v\x1c\xee}\x16| A\xf8\t\xa2\x8d\xceU\xd3\xb9\x94\xdf1\xf5\xae\xb4\xaa\xe4\xa1w\x8e\xdby\xee`t\x8bL\x95\x8c\xb9\xbd\x07\xa0_K\x08\xa2\x03E\x04\xb1 \xe2<\xaa\x92\x03\x03\xf03\x06\xe1~\x9c\x8cU\xa9o\x00\xfc\xbbJ\x0e\x02\\M\xc7\x89\x8c\x19\x95\xbf\xf7\xc2@\xe3\x03(\xc5\x9b\xfc\xbb\xd6h\x87hB\x9a\xd6\x8d\x85\xe7\x05i\xd7hE=\xcb\xb0\xd8I\xd2\xf9\xdeg+\xe1\xd3|\xe8\x08)\xe8\x10\x1dx\xb5\xf2-\xac\x9c\xfb.:4\x05\xde\x90\x07\n\xef\xee]\xdb1o\xf6\xc3F\xdb\'|\xf0\xf3~\xb4\xe0\xbc\th\xd3\xff\x01\xd0\x15s!\x9f5\x0bK\xde\x1d\xc9\\@\xf6\t\x9a\xe7\x92\x9cGq\x1d3\xf1M\xbc\xc2\xd35\x00\xe9\xfc\xa7\x9c}P\xc9\xc6\xa7\xf9\xe1\'\xf3\xf9\x15/`\xe3|\x97\xc1\xb2#\xe4\xe5\xdd\x8bO\xb6\xad\x07\xe8\xcc9\xef)L\x9a0\x89u\x87?\xa1\xe2c\xf7\x1a\x03\xcc\xa8\xbb\x81U37 ^\xe1\x89\x0f \xcc\\XX\xcav\xe2\x18`\xf0\xa0~\x06C\xfdj\xac\xd2\xcc\\n\x03\xd2\xa7\xa4\xa0\x7f\x12\x97H\r\xa0N\xadC\xe3w\xc0\xe8\x89\t(\xcc\xde\x82\xae\n\x0f+\xe4\xd9\xce\x00\xe8<!\x11k\x0f\xcf:`*\xaf\xa9\xdcO\x15\x8f\x7f=\x07L\x168g\xdbX\xae[c\x82l\xa7\xcc\x99\x94=\xc0\xf6\x08\xdaXZ\x15\xb0kA\x19\xba+<(c\xfa\xd9\x00\x881)\xfdL\xc60Y7\xfc\xa1\x19\x0cu\'\xe9\x996\x96\x95R%}|\xa2e\xa5\x91\xd0\x0f!\xaa\x92\x8c\xb4\xe4\xf1\x90\x85G\xc8\xc2\x93\x10S\xa4"\x00\xbe\x828\xe2<\x00M\x0b1\xb6\x82\x08\x89\x00\x1e\xfb|\x8e\tHgy\xaf\x8d\xe5n\xb9=m\x96\x14\xb4\xa6\xe9h\tf$\x9fN\x1a!\x19\xe2:\x97Xxf\xc6\x14)\x03@\t\xc4\xee\x9c2\\\x0f4\xa0Im@k\xb0\x05\x05\xee\x92\x08\x00\xa4\xd9X\xfe&\x95y\xd0T&5-\xd5H\xd3}\x9bO\x1a\xd1\x8f$Z\x13\x9d\x8f\xc0\x06\xce\xeb\xc7\x0c\xf0\x90\xb9\x8b\xce\x9b\xe2g\xc1\x16\x88\xf7g-E\xad\xffo\xa8\xcc{!4l/9`\x02\xb8\x15\'\x1d\x85)\xbdc\x88\x99z\xfa\xb3\xb7\xd5L=\xc3F\xb2\xa7\x89R\x96\xe26D7\xb6\x9b:P\x0c\xf1t\xf6\x0c\xfa\xd18\x9b?\xae\xbaw\xeb1\xe0&\x90\xf9d*\xee\xb9=\x1d\x0f\xa4O7\n\xd2;\xee\xe5\xc0U\x06\xa6\xd3\x16\x98.\x19\x98\x8dr\xabZXxK1\xccV=\xba\x00\xb0\x99\x83\xf6\x92z\x99\xe9\xf7\x90\xf9\x1cf\xe9\xb9n\x06\x99\xdeN\x9fa\x0b\xcc2\xf9^Xd\x8d\xe1Wf@\t\xa1s\xa1\x8e\x03\xc0\rQ\xf9|)\xd3/@\xddtF\x01\xbc\xf4\xe5R\x14-\xce\x87\'\xd8\x1ee\x99oI\xbf)\xb6\xc0\xdc&\xdd\xb4\xd0\x86\xd2Z\x19r\xe5<\x9e\xf5o#\xb3nZA\x88\xce\x006B\xac[\xb0\x82L\xae\xe1\x82R\x83\x1a_5j~hE\xae\xf3e\\\xf1_\xc4e\xdf\xf9\xce,\xf5\xc0\xbc\xcf\x16\x98\xc7\xa5sM\x02\xb8A\xa7\x15\x98,7\xc5c\x01\x12\x8a\x05P\x04\xf1\xcc\x13Y\xa8\xf2\xfc\x8aZU\xe1\x81\xc2\xdeC@\xc6\xec;\xf0\xa7Ro>C\xb2\x84\xb1xX\xe6\xe8R"\xc2<\x0c@p\xfe\\\xb6\xf4\x8d\xab\x95\xb0\x15\t\xc4\x06`=\xc4\xa8\x19\x8c9\xe2\x0b\x86\x87\xf6\xd3\x1e\xb1m\x96\x0e@/\xbfY)\x98\x98\x92\x81\x01c\x13\xa0\x04\x15\xecX\xcb\x8ci\xe6\xd80\t`\x88\xa1\x86\xc6\xb4\xcb\x91p\xebdt\xe8J\xf8c\x01\x14\xca \x94\'\\\xa4m?\xe7\xf9\xe19xZ\x94\xb9\xde\xa5T\xcbq]\xfe\xe1\x12\x80\xfe\xee\t\xe4\xf1\x9b@\xaf\x18\xcd\xe6\x9b\xc6\x88\'\xfe\x16\x14@\xb8\x16-g\x05\x0cF\x03n\xd3\x1a\xb8^\xb7\xf51\xd5\\o\xdb\xfa\xf2\xcc\xd3/\xc2\xbc\x99O\xa7\x90\x8f+8"e\xaf\x97\xf0\xbc\xf1\xe47\x01\xac\x86\xc8]h\x0b\xb8=@\xee+\xb6\xbeR\xf6\xe5\xda\xfa\xbe\x90\x8a\xdc0\x98k<t\x8a\x98\xc2{a\x96\xb0\xeb\x16\xe6At\x99\x86\xab b\x02\x8eKd<\x17\x1b\x84\x19Kl}["\xe9\xa7\xe1\x0cO\x95\x0b,?F\t3X\xeb\xb0|\xe8\xa6\x06\x98\x00>\xe5\xa0=\xe0\xbe\xa5\xcd\xb1\xf5\x95\xd3\x16\xda\xfa\x8a\rW\x025\x84W\xcdh2\x1d\xb7K\x05|\xe8Q)^i\xa9\x847\x11\xad]\x90w\x05\x9dO;\xd5\xb2l\xc8\x10y\x07?\xba?\x92\x8c\xc3\xff\xa0\x85z\xe2\\\xbf\xfe\x01\xd80Zf;\xf0\xee"\x00\x00\x00\x00IEND\xaeB`\x82'

    def getIconNew(self):
        return \
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x06\x00\x00\x00szz\xf4\x00\x00\x047IDATx\xda\xb5\x96kL\x9bU\x18\xc7\xff\x85\r\xd9M6\xa3s1hb\xbc|t\xba}\xd1\xcc\xdb4\x137\xac\xb8\xab\x84\xcb\xba!B)+\x14\xc6e\x05V\xa8\\\x84\xc1\xb8\x97r\xeb\x06\x94\xa1\\\x06\x13Y\xc3\x10u\x8bF\x17\xe2\xa2\x13\x97L\xb2\x05\xa3H\x18\xf7\xcb\x80\xd2\xd2\x1e\xdf\xd7\x95\xe5}i\x0fk\x9b\xee\x9f<9\xcf9\xa7\xefy~\xe79\xb7\n\xc0Q\x8e\xf6*\x81\xe0\x9eO\xc8\xbd\xd2R\x05\xe1\xf8\xdcFb\xf1\x05\x96\x1f,}G\x081\xde\xb8vYT_$\xefd\xaa\xd3\x8c\x99`C\x02n%[\xfb3I\x0cz\x15\xae\xd0\xe8\xd4<\x1a\xba\xfe0]l\xd2\x9c\xe8j\xa9\xd0\xb2M\xb6 x\x00Y\xb5?\x11\xf9\xe1\xd7\xd0\xd5\xd3\x0f\xfd\x82\x11\x06#k\x8b02\xe6\x88D\x1fl\xbf\x0fQ\x7f\xa9\xd7|\xb1\xb1Z\xde\xddZUk\x0b\x82\x07\x90Q\xf3#I\x16\xed@\xcf\xcda\xde\x80\xfa\x05\x8356\xe1\xd7\r\x0c0\xbb\x1c\x83C\xe3\xf7\x01\xfe\x87\x98\x9c\x83\xb6\xb3\xd7\xackf!\xaa\xad x\x00\xe9g~ )G_\xc7/\x7f\x8e\xf0\x82p\xe3-\xf9\x02\xcez/ijf\x16\x83w\xc6\x10\xec\xbb\x9d\xd7\xceB\xd4\xe9~7\xebZ\xaa\xe5\xdf\xb6ix\x10<\x00\xa5\xe6\nQ\x84\xbc\x89k}\xa3\xfc\xc9Z\xa2.\xf9\xec\x86[\x16\x9b\x07\x10\xb4g\x9bU\xdf\x08\x03\xa1j\xee1)\xc3v\n\x99\xeaU\xc6&\xac\x00\xd2\xaa.\x93\xd4\xd0\xb7\xf0\xeb\xadQ8\xa3\xe9\xe9Y\x0c\x0c\x8f!\xf0\xfdm6\xfb\x95UW\x90\x16\xf6\xf6I\xc6mb\xac\xcf\n@Q\xfe\x1dQ\x86\xef\xc4\xf5\xdbc\xf45\xe7fcY\x80I\x06\xe0\xdf\xe11\x9b\x9f\x05\xf8\xbc\x82\xd4\xca\xef\xf1Y\xf8;\x85L\xb5\x86\xb1\xebV\x00\xc9e\xdd$#\xe2]\xf4\xf6\x8f;\x95\x01\x16\x80\xa67\xb6>\x8d\x93\xe5\xdd\xc8\x88\xd8\xc5\x02\xb0\xfb\xe07+\x80$U\x17\xc9\x94\xec\xc2\x8d\xbf&h\x13\xc7\xca\x1d\xb0\x99\x1a\x16l\xc7K\xdeH*\xfb\x06\x9fG\xbeG\x07H(\xe9$9\xc7|p\xf3\x9fI\xfa\xa0\xb6r\xff\x00\xb1\xc7\xf8\xe5\x176\xe3DI\'r\xa2v\xd3\x01\xe2\nu$7z7\xfa\x06\xa6\xec\x1e\x9c{U\xd3\xfa\xd9\xbe\x17\xbd\xbd\x10_\xa4C\x9e\xcc\x97\x0e\x10\x9b\xdfNN\xc7\x08q{p\xda\xb1)\xda\xa1\xe7\x9ez\x14\xc7\x0b:\x90\x1f+\xa4\x03D\xe7^ \x85q~\xe8\x1f\x9aq(\x03\xc4\x8e\xfeg\xb7l@L^;\n\xe3\xfd\xe8\x00\xd2\x9cVR\x9c\xb0\x17\x7f\xdf\xb9\xeb\xf2\x0c<\xf3\xe4zD\x9djCI\xe2>:\x80$\xab\x85\xa8\xe4\xfb10\xc29N\xb6\xde\xe3eS\xe6\xde\x96\xb4\x0cx?\xb1\x0e\xc7\xb2\xcfC%?@\x07\x10g4\x11u\xf2A\x0c\x8d\xcf9\xba\xd1\xa9K\xb2\x14`\xcbck\x11\x91\xd9\x8c\xf2\x94Ct\x800\xe5\x17\xa4B\xe1\x8f\xe1\x89y\xc7\xa3\x10\xacx\\7oZ\x83\xf0\xf4FT*\xfc\xe9\x00\x9f\xa4\x9e#\xd5i\x01\xcc;\xaew\xea5\\I\x8f{y"4\xad\x01\x1ae \x1d\xe0HJ\x1d9\x9b\x1e\x8c\x89\x99\x05\xfa\x8c\x9d\xb8\x88Xm\xda\xf0\x08B\x14\xf5`\xc6\xa7\x03\x1cN\xaa!\xb5\x99"L\xcd\x1a\x1c\x8f\xf0\x006\xafu\x1e\x10%\xd7\xa2.\xeb\x08\x1d H~\x86h\xb3\x8e\xe2\xee\xbc\xd1)\x80\x95\xb4~\xcdj\x04\xcb\xcf\xa2>;\x84\x0e\x10\x90PE\xce\xe5\x84bNo\xe7\x7f@\x07\x96c\xad\xe7*\x04&j\xd0p*\x94\x0e\xf0q\\%\xf92\xf7S\xe8\r&\xfbFu@\x9e\x1e\xee\xf0\x8f\xafBc^\x18\x1d\xe0`\x8c\x9a4\xe5\x8baX4\xbb\xf45d\xe5\xb1\xda\r\x87b+\xd0\\ \xa6\x03\xec\x97\xa9HK\x81\x04\x8b&\xb3\xcb3\xb0\xca\xdd\r\x07dj\x9c/\x92\xd0\x01\xf6JKIkq$Lfg\xefA\xba\xdc\xdd\x04\xd8\x17]\x8a\xb6b)\x1d\xc0/\xb2\x98\\(\x95:t\xc1\xd8+\xf6\xe2\xfaHZ\x8c\xafJ\xa3\xe9\x00BI\x11iWE\xb9>\xbaE\x1fF\x16\xe1\xeb2\x19\x1d\xc0W\\@:\xd4\xb2\x87\x06 d\x96\xbfC\x1dC\x07\xd8#>\xfd\x10\x92\xcf\x97\xae\xfc8\x1d\x80\xd1\xf3\x8c\xf9X\xca\x8d\x8c\xe9-\xe6J\xddb\xec\x92\xa5\xc4\x7f\x01\x96\x00?&\x86<\x06\x00\x00\x00\x00IEND\xaeB`\x82'

    def getIconSave(self):
        return \
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x06\x00\x00\x00szz\xf4\x00\x00\x07\x87IDATx\xda\xc5\x97{PT\xd7\x1d\xc7\xbf\xfb\xb8,\xbb\xc0\xb2,Oa]Xy\n\x8a\x8b\x80\x8a\x98\xf8\xc8d\xda\xe6\xaf\xd4i\xd2i;N\xec?\x9d\xe9\x8cMj\xa66\xa4\x9dN\x86\x89\x12\x93ifB\x89\xb1\x96\x0c\x8a\xa4\xd6\x84VR\r\xd6\tTy\x88"\xb2(o\x96\x87+\x0b\xc8#\x04dqy\xef\xde\xfe\xee\xb9\xcb\x02\x05\xb6\xc98\x93\x9e\xe1\xb7\xf7\xdc\xbdg\xcf\xf7s\xbe\xe7w\xce=H\xf0\x7f.\x92\xf5\x1edee\xf1O\xd3\xf1\xc9\x93\'\x9f\xa7K;\xc5\x10\x85\x93b\xcd\xfe<\x02\x18\x8dF\xc8d2H\xa5R\xc8\xe9*\x93\xcb!\x97s\x14rp\x9c\x8c\xd59\n\x99\x9c\xea2\xe1\x19\xb5\xa5v\x85\x85\x85\x02@\tu\xf3W\x8a2\n;\x85C\xe8\xf7\x8d\xec\xf7\xbe\xdf\xabM\xc9\xefl4\xfd\xad\xeb\xb3\x9c\\\x06\x10\xb5\xe7\x9d\x032\x85\xdfU\xaa*\x16\x01^J\xef\x07\x03 q\xa1\xd3E\x00\x8eB&\x08\xbb\x00\x04\x98\x86\x86\x06|=:\x8a^\xab\x15\xc7\x8e\x1dCAA\x01\x8a\xef\xeaV\x0chav\xac.9\xa4\xed\xa2\xdf\x0bG\xfe\xd0&\xdb\x10\xd0\xd3\xd2\t\xee\xb3_\xbf)\x89\xca<\x9e.\xf3\xd6\xd4d\xbd\xfe\x1c\xb7\'E\x0f\x89\xcb\x93s\xb9o\xbb\x00\x84QI\xd9\x08\xd9H\xd9\xa8\xe5"\x0cG\xa3\xe684\x98L\xab\x00\x0e\xfe\xe2M(\xbdd\xe8\xef}\x80\xe6\xde9\x94\x94\xdcB\xc8\xfe\xed\xce.o\x9d\xb4\xb3\xe1>\x02\xcc\xd7\xbe\x9e\xa8-.\x92D?\x977\xf3\xfa\x91\xbd\x8a\x03;\xa3W\x10\x17\xfe\xc9\x05@\xe2R\xa9l\t\x80\x049\xc1nA\xdc\xe5\x88i\r\x07\x04\x80\x92\xa2?\xa3\xba\xfc*6\'\xa7 )\xf5\x19\x8cQ&\x98;\xda\xe1\x9c\x18\x1b\xbf\xfc\xc9\x99\xea\xd9i\xfb\r\x02\xf8\x90\xbfRt\x98\x89\xba\xb3\x84*Ey\xc7\x19\x800\xff2\xd9\x12\x800\xe7\xf2e\xf6\xaf\x07\xa0\n\x8e\xc4\xc8\xa3>p~\x81\x98\xd0\x19\xd1-\r\xc3\x83v\xb2\xddtiv\xb4\xfe\x9fw&m\xb6k\xa4T\xcc\x00.\x9f?,\xaa\x93\xfd\xbc\x8b\xe2\x93\x0f\x8f{\x9e\x02N\x14\x17\xa6\xc1dZ\t\x90\x9d\x9d\r\xceW\x8bP\xdd&\xcc\xe8\xb7\xa3\xc6\x19\x81\x96v\x0b\xbc\x9a\xcb1{\xf3/\x0fg\'\xc7KI\xe2\x02\x85\x89\x01|^xX\x1c\xfd\xd2\x07.\x9c:\xb1"\te\xae,_\x12_r\x80\xad\x0e\xd7\xf3\xc1\xa1!\xe4\xe4\xe4`\xeb\xae\xfd\x90\xc6\xedF\xf5\x82\x0e\xad\x9dVh\xba\xaa0]_\x86\xc7}\xb5\xb7\xa9\xfb\x8f)\n\xd82\x14\x00.\x9d}e\xe5\x14P\xb9\xf8\xd1\x89o\xbd\xf6y\xb2\xaf\xbe\xbe\x1eA\xbah\x84f\x1eD\x9dT\x8f\xa6\xce~h\xba\xab\x107\xd3\x81\xa6\xf6i\x8cYJ\x8b\xa9i\x1eE\xb5\x1b\xe0\xef\x05\xaf\x908\x0f\xd7\x1f+\x0e\xa7\xe7}h\xf9\xd3\xc5\xcd\xa4\xf8\xdc)<\xb4\x01\\\xec\x0e\xf4)#\xd0\xd0\xd1\x07u\xcfm$\xcc\xb6"!>\x1e\x97\xafOb\xe0\xde\x07\xa7\xa9i>\xc5=7\xc0\xa7\x1f\x1frw\xca\xf3\xab\x85\x9c\xfc\x12\x9cd\xd5\x96&\xde\x9d?\xf5.\xfa\xa6\xbc\xa0J\xdc\x8dau\x14\xeeuX\xe1\xddM\xe2S-\x88\x8f\x8b\x81q\xe7\x1e\xbc\x7f\xba\x15\x96\xea\xdf~ ,2\x8a\xfbn\x80\x0b\xf9\x87\xdc\x16.\xa6\xc1r\x11~\x19\xc0\xe2\xf7R\x89X\x1f\x1f\x1dA\xf1\xd9<p\xfaT@\xb7\x19\x1d\x0e\x7f4\x9a\xfb\xe0\xdds\x07qSM\x88\x8f\xd9\x04\xe3\x8eL\x18\xe2\x92p4\xab\x14=7^]\rPt\xe6g\xe2\xc8\x05\x11\xc9r\x00\xf1\x0b\x01\xc0\xe9\xba\xe7]\r\x1c\xf4hv\x81\xc7\xbc\xd3\x89[\xa6V\xf4\xf1JX$j4\xb7[\xa1x\xd0\x00\xfd\x84\t\x1b#\xa3\x10\xbf=\x03\xfa\x98D$D\x04\xe1\x97\xaf~J\x00\xbfZ\rp\xee\xa3\x9f\xba\xed\xcf\xbfe\xfdV\x897m\x7f\x82ib\x1aU\x06\xa2\x99\xe6\\\xda]\x8f\xc0\xa1;\xf0\x0f\x0eCXB\x1a~\xf0l\x06\x94\xbe\xfe\x88\xd2*p\xe4\xb5u\x00\xf2\xf3~B5q\xd8\x05\xb5\xfd(\xfa\xf9\xb6o$\xde\xf2p\x04\xefV\xf6\xa2\xd3\xa1F\x0b\xd9.\xefmF\xfa\xdc=d$Eb\xdf\xbe}8\xd3\xc6a\xef\x16\x03$\xb4\x8fD\xfa{\xe1\xb5\xa3\xeb\x00\x9c\xce\xfd\xb1;\xf9\x8a\xee\x0e\xb8\x01\xd8;\x94V\x83\xb0 \x04\xcb\xc9m,\xb8\xee\xbb\x07\xc7p\xea\xa6\x05-\x0bj\xb4\x99\xad\xe0\xadflyR\x0f\xa3!\x04\xe9\x99{\xf1\xe2\x81\x1d8z\xa5\x1f;7\x05\xb1\xbetj/\x1c\xfbM\xf1\xda\x00\xb9\xef\xbf\xecN\xef\x8b\r\x8f\xdc\x00\x0e^\x14\x13\x84\x19\x04}8\xa8\xde78\x8c\xfc\xea.\xdctl\x80\xb9\xb3\x17Nk7\x12\'\xef`\x9b>\x00i\xbb\x9fE\xd2\xb64dn\xde\x80\xc3\xe7[\x90\x1a\x19\xc0\xfa\n\xf7\xe3\xf0\xbb7\xfe\xb16\xc0\x1f\xdf\xfb\x91;\xbb/5\x0e1\x00!\xf1\x1c\x94pN~\xc9\x01A\xdcf\x9b\xc4\x97\xd7\xbe\x80\xcd!Gn\x0b\x8fGC6$O\xdcF\xf2F\x7f\xa4f<\xc3\xc4\xfd\xb5A0\xeaT8t\xb6\x11\xc9:\r\xeb7\xccW\x8e\xec\xdf\x97\xac\r\x90\xf3\xceA6\x05s\xa4\xf0e\xc7(\x03\x10F_e\x1e[1\xe7s\xd3v\x0c\xb6\xd7A\xa3\x94\xe2nM%\xae\xb4\x8c\xd3\xeb[\x82\x84p?$\xa7f ~\x8b\x11\x9a\xc0 \x84h\x03\x90\xbc\xc1\x8b\x01$\x86\xab\xddS\xb0.\xc0[o\xbf\x88\xe9y\'&f\x16\xd04`c\x00\xe2\\\x93\x03\xe4\xbf0\xfaI\xfb\x14j\xab+\xa0\xa07amm-*\xae\x97C\xa1\tC\\\\<\x8c\xe9\x82\xf86\xf8\x07\x04C"\x953xc\xb8\x08\x10\x1b\xe2\xcb\x00\x0cZo\xcf\x00\xbdc3\x98#Q\xcb\xa8\x9d\x01\xcc\xbb\xe6[\x98\x02\xfb\xd4\x0cjoV\xc2W\xe5\x8d\x9a\x9a\x1a\x94\xff\xfb:|\xd4\x01d\xf7v\xa4\xa4\xef\x82!v3|\xd5d\xb5\x94cy"LYJ\x84\x08`\x08\xf4a\x00\xb1\xc1J\xcf\x00mCS,\x0f\x06\x1eO1\x809\x1avM\xd7\x18\x16\xe6\xe70l\xbe\x8b\x18]\x08*++q\xb9\xf4_\xf0Vk\x11\x97h\xc4\xd6\xb4]\xd0\x1bb\xa1\xf2\xf5cS\xb1X\xd4~\xbeH\x8dP0\x80\x08\x8d\x8a%xR\xa8\xca3\xc0\xfdG\x93\xec\xc7#\xb6Y\x060\xb3 :PSu\x03Z\x8d\x1aUUU\xf8\xa2\xf4*\x02\x82C\xb1\xd5\x98\x8aT\xda^\xf5\xd1\xb1\xf0V\xfa\x89K\x94\x17\xdb\x0bu!\x9fRu\xa2\x03!j\xf1\x98i\xa4<\xf1\x08Pg\xb5\xb1\xcd\xe8\xb1}\x9e\x01L\xcf\xf3hkm\x86cn\x06\x15\x15\x15(\xbfN A\xc1\xd8BY\x9e\xb63\x13\xbaM\xd1\xf0R\xa8X\x9e\xb0\x15\xc2\x00D\xfby\x02I\xdb(:\xa0\xf1\xe1\xd8\x1e\x97\xae\xf7\xf7\x0cPcy\xcc\xac\xb2S"\n\x00\xc3\xc3\xc3\xb0X,(++\x83\xd9l\x86F\xa3a\x07\x94\x8c\x8c\x0c\x18\x0c\x06(\x95\xca\x15\xb6\xafU\x04\x00\x1f\x85\x9c\xd53\r\x1a\xcf\x007\xba\xc5%7\xbf \xbevv\xa9\x06\xd1\xd5X\x87\xea\xa6\x1e\xcc\xf2rh\xf5\xf1\xd0F%B\xa5\r\xa5\xd3\x11\x07\xfc\x0f\xf1\xc5"\xb4\xe2\xe4R\xec\x8b\xd1z\x06\x10\xd6\xff\xf2.\xf9\x81\xfb\x18\xf8j\x02\xd3\x13\xa3\xf0\t\n\x87&<\x1aJ\xff@Zf\xb2o$\xfc\xdf\xe5\xf9\x84\xa0u\x00\xf6\xe7\xf1o\x9d\xf8\xe1\xaa\x1fL=\xb1a\xfc\xab!v\x16T\xd3\xce\xe6\xad\xf2a\xc7\xf3\xa7)\xeb:\x805\x8e_\xbc\x90I<\xfd7%\x91\x91\xdb\xd2\xa7\x12^^V\x01P\xc4P|\xcfu\xfd.J7\x85p0\x1dY\x04\x10\xf6\xca0\xd7\xf5\xbb(\xa3\x14\xfd\x8b7\xff\x01\x01\xeb\xcb\xb0J\xee\xae:\x00\x00\x00\x00IEND\xaeB`\x82'

    def getIconClear(self):
        return \
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x06\x00\x00\x00szz\xf4\x00\x00\x00\x04sBIT\x08\x08\x08\x08|\x08d\x88\x00\x00\x00\tpHYs\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x05\xf4IDATX\x85\xc5\x96il\\W\x15\xc7\x7f\xef\xcd\x9b7\xf3f\xcb\xd8\xe3\xf1\x968\xa9\x9d\x96\xban\xb3\x98\xa6JqK\x1bpEi\x01!$\xa0\x8d"\xb5@\x92\xa6\x05\x0b>P\nH4R#\xf1\x85\xb5B\xa4+\xa5{L\xa1-\x11PA uB!\x89c\x97&\xb8\xa4\xceV\xc7\xa9\xedx\x92x<\xcb\x9b\xe5\xcd\xdb._f\xa2\xa9e\xa7\rY8\xd2_\xf7^\x9d{\xef\xf9\xbds\xaf\xde=\x123\xec\'\xab\xa9\xf3I\xf2\xa7L\xe1N|\xbb\x97\xbf\xcf\xf4_h\x93\xaa\x07\x8f\xdfC\x9d&\x05\xdf\xba\xec\xaa\x15-F\xc9H\x8f\x1d~\xeb\xf9\xb5OY\xdf\xbc\x98\x00\xf2\xfb\x06\x8e\xfap\xdb\xf2\xee\x96\xb4\x19\xc0\xe3\rE\x9b\x17]q\xdf\xa3_\xf3\xae\xb9d\x00\x92\x10u\xae\x9dG\x0b\xd6"\\\x8b\xfa\xfaFE\xd3j\x1f\xbcd\x00\xae+\xed\x91\x85\xebJ\'\xfe\x8c73\x841}\x8c\xe6\xe6\x05\x0b\x1e^\xa3~\xe1\x92\x00\xac\x7f\xc6\xdct\xf4\xd0\x81#\xb5\x0b;\x01\xb0\x8b)"AO0\xe0W\xbeuI\x00$\x10\xb9\xcc\xa9\xbb\xc7\xc7\xc6&\xd5p#B\x80\x91M0o^M\xfb\xcf\xefd\xe5E\x07\x00\xe8y\x81\xbd\x93c#\x9bu\xc3[\xb2P\xc9\xe9\x19\xfc~o\x83OQz\x00v\xbf\xa8~n\xf0\xb7\xb1\r\x17\r\x00`\xc3\xb3\xf6\x0f\xdf}\xf7P\xbf-G(Y\x02\xb3\xa8\xa3E\xe9\x1ax\xa5a[\xd3\x15\x9f}V\xf1j_\xb9P\x00\xca\\\x0eG7\xef~\xef\xc4d_M\xc4\xd7\x16mq\xb9\xfa\xea\xeb\xdbZ\x97\xdd\xd6\xa6\xfa4\xf4\xa9\xfd\xd2\\\xeb\xce\xd5\xce\xba\xd1\x8eG\xbc\x0fiu\xf3\x7f\xd0q\xddg\xe4`4\x0e\xc2&\x97\x82\xe7\xefz,{b0U2L\xe7{?\x83__p\x807\xb6\xb0R\x95\xe4\xcd\xb5\xcd\xed\x1d\xf5-\xedZ0\x14G\xb8>\xdex\xe4?\x1c|\xf9(+\xe40r&\xcb\xef\xc6\xc7G~,\xc4\xe2\xf3\x01\x98\xf5\x0e\xa8.\x01Y\x96c\xde\x80\xa2\x15\xb2\xc3\xfc\xfb\x0f\xfb\xf8\xe5\xaa^\xd4\xd7\x92\xdc\xbb\xfcF\x16\xd4\xc6\x18r\xf3\xa2i\xa9\':\xd0\xabl<\x1f\x809\x8f`\xc7\xd3Ds\x13\xd2K\x07{\xb5\xeeh\xc2\xf5|,\xdcH\xac\xa9\x89\xa3X\xa2\x7fz\x94[7vIW~"Hr*\xef\x8e\x1f\xdcq\xd8\x15\xfa\xed\xd7\xdf\xc1\xb1\x0b\x06\x00\xf0\x1d\x18\xea\x86%A\xa0T[\xc3\xbe\xa0-\x96}\xb5[Z\xd5\xb3\x04\x8f8\x04\xce8\xba\x9e\xc2t\xaf\xe4\xc4\xe8\xbf\x12\x85\xe9\xb1{\xba\xd6\xf0\xc7s\x01\x98\xf5\x08*&`o\x02\x9c\xbd!\xec\x91kU6\xf4\xad\x91>\xd9\xd3\x08"\x05\x92\x0f\xc7\xf5\x02`\x17\xf7PS\x1fo\x8c\xb5t=\xdd\xbf\x85o\x9c\x0b\x80\xe7l\xcek\xe0\xf54X\xd7}_\xc9\xde\xf6\xe0\xea\xabB\xdaa\\\x07,\xb3\x84\x10&\x8a\xc7\xc5(dp]\x1bC\x7f\x0f5\x14\r\x04\xe37\xdcx\xc7\xcd\xc3\xbe\xa7^\xf9p\xb5\xc4Y3\xf0\x04\x14~\n\x9bb\xed"\xe5X:\x96\x95E\x96\xb2\xb8v\n\xdb\xcc\x93\xcf\xea\xa8>\x1f\xc2\x06\xaf\x16\xa7\x90\x1eB\x96&"\x0b\x97\xac\xfd\xee\xae^\xef\xa3\xe7\rpf\x92\xebN\x9b\xa6\x85a\x16\x11N\x06\xc7L\xe1\xf7\x0b\xf2z\nY\x96p\x05\xb8v\x0e_p1\xb9\xd3o"\x9c#\xda\xa2\xa5\xeb\xd7\rn\x8d\xfff\xcf\x934\x9c7\x80\xe3\x88\xb7\x8dB\x1a\xa3\xe8P(d\x90\xc8S*L\x11\x89j$\'\xa7\x08\x86\xeb\xb0\r\x1b\xd7\x9e X\xb3\x9c\xccd?\xc2>\xa04\xb7\xaf\xffrh\xd1G\xb7\xef~\x869\x9f\xf3\x0f\x05 l\x86\xf3zR7-\x87\xbc\x9e\xc5vJ\xe8\xd9\x14\x1e/\xe0\xf1R\xcc\xa7\xf1j\xf3\xb1\x0c\x13\xc7:N\xa4\xa1\x8b\xa9\xe3\x83\x98z\x9f\xd4\xb0x\xd55\xf5\x1d_\xdc\xdc\xff"O\xfc\xf3W\x84\xff\'\x00\x14\x8e\xdbfj\\H5\x14r9\x1cQ\xa2\xa0\xebX\xa5"\x91\xd8B\x92\x89\x0c\xfep\x10\xbb\x14\xc22\xa7q\xecq\xe2\xad7\xa1\x9f>L&\xd1G(\x1akj\xe9\xfc\xfaZ\xd9/\xbdv\xae\x00*\x10\xba\xe1.\xec\xd4\xc9\xd1\x11\xd9\xd3\x8c\x83J1\x9fEV\x83\xa4\x92\xd3\xd8v\x9ah\xd3R\xd2\x89#D\x9b\x97RHKX\xc61\x1ck\x8a\xd8\xc2\x8f\x83+\x93\x9e<\xc0\xe9\x91\x9d\x89m{\xc4:@\xab\x8e;\x17\x80\x02\x84\x800\x10\x01"\xfb\x87y\xb5\x90>i\xaa\x81\xcb\xc9\xeb9<\xfe0\xd9t\x0e\xb3\x98@\x8b4cY>\xec\xd2i\xa2\r\xcb(f\x05\xa5\xfc\x10\x8aZ\x8f/\xda\xe9\x9e\x1c\x1d<\xb2m\xfb;\x0f<\xb4\x99by\xcf0\xe0\x87\xd9\xff\x03\xde2\xa5V\x9e\xa4\x01\xda\xb6]L\xddy\xab\xfd\xf9\xba\xf9\x1f\x89\xe4\xa7GQT\t\xa4Z,{\nY\t\xa0\x06\xe6\x93\x9e\xdcG\xa4\xb1\x13!\x14\\\xbb\x9e\xe9\xe4!\xfd\xed\xbd;\xfet\xfb\xbd\xf6\xfd\xbb\x878iYHpF\x00\xd2l\x00\xber\xea\xd5r\xbf"\x7f\xc7\xe2\x9c\xd9\xda2o\xa5\x16i\xf3\x18\xf9\x83\x84\xe3+HM\x8c\xe2Q\xf3\xf8\x02\x97c;\xe0\xf1\xd6!{/sF\xdf\xd9yj`0\xb9u\xddF\x9e\x03\xb0,\\@\xcc\x90;gAReg\x16\xdc\xff#\xfe\xd2\xd16pK\xe7\xcd\xf7]\x9bN\xbcI\xb0&E\xbc\xb5\x9b\xd4X?\xc1\xd8\x02\xd4\x80j\x8f\xee\xff\xbd\xf1z\x7fi\xcb\xa6\xc7\xf9\x1b`\xcc\x12\xf4}6\xdbc\xa4\x94S\xef\xaf|yu&\x1641\xef\xa5_\xc4_h\xed\xf8R]>}\x0cE\x8b9\x93#;s\xfat2\xf9\xd7]\xc5W\x1f{\x99\xc1|\x1e\x030\xcb*U\xb5F\xb9\xad\xf4\x8d\xb9^CO9p\xf51T\x8e\xc5\xfb\xe9\x9bh\xeeY-=`\x96\xb0\xc6O\x89\xe1\xad\xdb\xf9G\xdf\x00S\x95\xb4\x02\x0e`\x03V\x95f\xc2\x94\x80\xd2\x07\xd5vJu\xe0*y\xca>\xb9\xac\xea}\xdc\x19\x10\x15U *\x12\xf0\x01\xf5\xc0\x0c\x93g\x00\xc8\xe5\xb6\xfaVW\x03T \x9crp\x9bY\xee\xc0\xff\xdd\xfe\x0b\xff\xa0\xa7\x821h"f\x00\x00\x00\x00IEND\xaeB`\x82'

    def getIconHelp(self):
        return \
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x06\x00\x00\x00szz\xf4\x00\x00\t\xaeIDATx\xda\x9dW{PT\xe7\x15?\xf7\xde}\xc2.\xcbk\x97U\x04\x04\x14\xa2"\x06\x14)c5fb\x1d\x8di\xd3\xb1\x9a\xd4\x7f\x9a\xa9\xadm\'%\xc6Dg:\x8d\x9dig\xea\xf41:\xa6\xf1\x11\'\xcd\x14\x13\x93\x98\xfa\x1am\xab\x06M\xa2U\x91\x02\n(/\x81e\x01a\x81ey\xed.\xec\xb2\xf7\xdd\xf3\xdd{YA\xabq\xfa1\x1fw\xef\xeb;\xbf\xf3;\xbfs\xcew)x\xcaQ\xbc\xb3\xd3NS\xb0\x92\xa2t/\x00\xcd\x14Q4\x93EQt\xbc$K\x11\x10\x05\x8f\xc8\x87\x9b%!|\x83\x9b\x18\xbe2\xdeW\xdb\xd2y\xf9W\xc2\xd3\xacK=\xe9\xe6\xf2\x1dmh\xcfP\xc0\xd0\xfaRs\\\xcc\x96\xc4D\xb3)\xce\xaa\x838\x0b\x05V\x13\x05z=\x80$\x02LL\xca\x10\x08\xe3\x0c\x8a\x10\xf4\xb3\xe2\xd8\xd0\xe0\xdd\xf0H\xef\xfbAO\xd5\xc9\xee\xafv\x8f\xff_\x00\x8a\xdfv;tz\xe3n[\xa2\xad\xd4\xe94\xd2\xce$\x06t\x0c\xde\x90d\xd0\xe3\x91\xd1\x01\x18\xf0u\x1e\xcf\x05\x19\xf0\xa8\xbe\'J\x14\x0c\x05$\x18\x18`\xc1\xd7\xdbs7\xe0\xa9\xdb=r\xef\xdc\xa5\xa1\xe6\xd3\xc2S\x03(\xde\xd1U\xa2\x8f5\x1c\x9e\x9b\x99\\\x90\xea\xd4A\x0c\x1a4\xe8e0`\x0cdy\xda\x9b\xf2\xcc\x15D\x990"\xc3\xa4\xa8\x02\x19\x18\x11\xc1\xd5681\xe2\xae=4\xea\xba\xf8\'o\xed_\x03\xdf\x08`\xf9[]\xeb\xac\xf1\xd6\x8f\xb2\xe7\xd9R\xd2\xec4\x1a\x94!\xd6\x88\x86\xa5i\x0f\xa1\xa1\xe6{>\x18\xf4\x8eC\x8a\xd3\n\xcf,pDo1\xda\x8a\x93H\x8b$\xabl\xb4\xbb\xc6EOs\xe5\x89\xe1\xa6\x93o\xfa\x1a\x8e\r?\x16\xc0\xb2\xed\x1d%\xd6\xc4\x84\xb3\xb9\xb9q)\xb3\x93h\xd0\xd3\x9a\xd7\x9aQQ;\xde\xb8\xe6\x86uK\xe3\xe0\x97/\xa7@\xf7\xa8\x0cg\xefJ\x10!\x04\xd3\xb8 \x02\xa5i\x15\x08\x87/D\xf0|4(Ck{P\xea\xa9\xbb\xfc\xd9`}\xd9\xf6@\xd7\x97\xfeG\x00,\xdd\xde\xe90\x1a\r_,z\xd6Q\x98ng\xc0\x8c1\xa6h\x12sP\xbc\'1\x96\xf1\xaf\xb5u\x08r\x1d\x14\xbc\xf3jJ\x14x\x9dG\x86\xf3M\x92\xba\x18\x01\xa1\xad\xcah\x80y\x9c\x03\x08\xb4\xa1\xb6\'\xd2[{\xe2\xf7\xde[\xef\xed\xe5C\x83|\x14\xc0\xb3\xbfh\xa4\xf4&\xcb{\xd9\x0bf\xbd\xb1([\x0ffJ\x06\x8aQiW\xe2\x8aa\x10\xd0\x1b\x12\xff\x8ak\x9dp\xe4\xedy\x90\x95\xfc\x80<\xf7\xb0\x0cG\xabDe9\x86\xd6\xa4\x81\xd6\xd1\x07\xd0\xe1c\x84\x1c"\xd4N\x8f\x00\r\x95\xf5>O\xe5\xfeM\xa3\xad\xa7nD\x01\x14\x94\xba\n\x93f\xd9k\x96\xe6[\x99x3\x80\t\xd3K\x14U\xe3\xcaD\x17$I\r\x81\xab\xdd\x07?\x7f)\x05\x9e\x9bGG\x01\xd4tKp\xa6Ae\x80\x99\xd2\'\xa32A\x00\xe9\xd1\x19\x1e\xd7\x08q\x144\xb4L\x80\xeb\xfa\xdf/\r\xd4\xec\xdb\xc2\x8eu\x8c)\x00\nK]ey\x05\xe9?~&\r\x15o"\nVi\xe7p\n\x08]F\xcb\x1c\x02\x91E5\xe5\x0c\xe8\xda\x8f\x8a\x18\x98\x8f\xa1h\xf7\xc9\xf01z\xcf\n\x0f\xd2\x83\xd1\xf8\'\xde\x930\xa2\x8cT\x10\xb8^G\x9f\x00\x8d\x95\xb7\xfd=\xd7\xf6\xfc0\xd8U~\x89Z\xf2\xb3F{\\\x92\xfd\xfe\xca\x15vsb\x0c\xbe\xc7\xa8\xdes\xc8\x9b \xa9\xd4\x8b\xc8=O\x8exM\xd2\xc2\xa2\x10.\xc9Q\x16@\xd3\x0b\x11 \xa1\x80A\xf7\x15\x00$\x0c:\x95\t2&\x90\x85\xdb\xb5#\xe0\xfaz\xff\xe7\xde\xea?o%\x006\xce\xc9\x99{\xe6[\xf91X\xdd4\xcf\xd1\x10\x8b\x16x\x92J\x92j\x9c\x17TfD<WC#C[]\xb7\xb2h\\\x82\x05\xe6\xa4\'k\xaaS3\x80\xc1\x7f\xc4&\x83\xee\xd3\x8c\xcaB\x8c\x9e0IA}s\x18Z\xae\x9epw\x97o[C\xe5\xff\xb4\xe1\xf0\x92\x92\xdc\xd7\x17d \xfd\x06\xd5\x08\xc7\x11\xfaU\xef9\x04!\xa0q\x02\xe2\xbe\xdb\x07c#\x13\x8a\xca\x9c6\n6o\xc8\x82\x85N\xccu\xbc\xf4q\x95\x00$a\x89\xe7\x84E\xe2\xb9\x92\x8e\x8c\nB\x87\xd7\xf5\x06\x95%w\xbf\x08\xf5W\xff\xedo?\xb9\xeee*\x7f[\xf3\xadUks\x97e\xda)\x05\xa5\xa8y\xcb\xa1\x9b\x84\t\x02\x80\x9cwu\xf8`Y\x06\r\xbf\xd9\xe2|\xa4r^m\x15\xe1\xe8MA\x11\x1d\x99:F\xcd\x06\x05\xc04\x101X\xd08\x14\xd3h\x08\xa0\xeaj\x93\xd0|\xb4p+\xb5x\xdb\xbd\x91\xef}?\'\xd1b\x04\xb0`\x08\xc2\xe8\xbd\x883\x82\x86Y\r\x04\xf1^\xe0e%$<^\xdb\x90\xc7\xc0+E\xba(\x80\xe3\xd5\x02\x9coPK\xbd\x8ePN\x8ck"\xd4\xe9T0f\xbd\x9a\xb6\xdd\xd8#\xe2\x13LPs\xbd\x03\xee~\xb0\xe0\xd7\x08\xa0E\xd8\xbc9\x97q{x\x98\x97\xaa\xc3\x02Da\x19E\xcf\xd1 \x8b\x93\xd3\xb4@\x90\x130\xd8~\xc1\x1c\x1e\x85\x0fJgG\x01|V\xc5\xc3\xbf\xee\xa8\x00(\x04\xa0Wb\xae\x1a6\x18(0 #DK}\x83\x1c\xf4\xf5\x05!o\x89\x03j+\x11\xc0\x91\x05{\xa9E[\x1b\'6\xfe`almS\x18\xacq\x0c\xcc\xb6\xeb\xc1b\xa6\x94\xf4aYP@D\xa6\xbc\xe7U\x06\xc6\xbaz\xe0\x8b?\xe4D\x01|R\xc9\xc3?\xea\x85h\t&E\x8c\x185\x10\xafQ\xac\x93\xac\x04C\xc3\x1c\x8c\x8e\x84@\x12$\xc8+tB}E;4|\xb8h\x1f\xb5\xf0\xb5\xdb\xadk^Z\x92\xdb3\xc0\xc3dX\x04\x93\x99\x01\xab\x99\x86\xf88\x1aiTi#\x86\xa7\xb4\xc0a2\xf76\xba\xa0\xe2\xe0\xe2(\x80c\x15\x1c\x9c\xad\x17\xd5\xa2\x83\x0c\xeah-U\xf1_($@0\x10\x81H\x98W2\xcc`\xd4\xc3\x9c\xb96h\xaa\xac\x93Z>)\xf9\x1d\x95\xbb\xe5\xda\x99\xc2\xe7\x8b7\x12\xdd\x06\x82\xbc\xa2pR\xf3\r\x06\x06\x8c\x06\xd5\x0bF)\xcb\xb2R\xd3%\x04\xe2i\x9a\t\xe0\xd0W,\\n\x14T\xf5#u\xc4K\xe25;\xc9\xe1\x14\x90~Q\xa9H2\xa6\x98\xc5\x16\x03\xb1\x16=\xb4\\/\x0fu\xfes\xd3.j\xde\xa6\x8b;\xb2\x97\xaex7+3\x06\xee{X%\x13\xa6\xba\x1f\x01\xa2\xc4\x12]"\xd7Ae\x14|m\x1dp\xf3\xd0\x03\x00\x07\xbfd\xa1\xfc.\xafVJ2\x91%\x01\xc5C\xf4B\xbc\x96H\xf5\xc2\x97E\xacd\x8e\xd4\x04\x08\x8fG\xa0\xedJ\x99\xb7\xff\xfa\xae\x9fP\x19\xeb\x8f\xe5;rV\xd6\xadZ\x9d\xc6\xb8{9|H\xd2\x10\xcc\xdco\x90\xdf\xc48I\xb3Qw\xe7L\x00\x97Y\xb8P\xcf)UR\xc2\xf7\x89\xe0$\xccg\xb5r\x127$\xcd!\x80\xf4\xccxp7\xf7A\xe7\x95=\xcdc\xcde\xafP\x8e\xa2\x9d\xba\xf8\xac\x17\xab\x8b\xbf\xb3\xa2P\x8f\xb4\xfb\x86Y\xcccZ)\xb5\xd1v#M?\x01\x18j\x9f\xc9\xc0!d\xe0|=\xaf\x84\x89\x18T\xfa\x87\x06BV\xfa\nVO\xacjV\xac\xf5&\x93\x0eZn\\a\xfbo\xfe\xf6\xc4\xa4\xaf\xb6Tq0mm\xd9\xd6\xf4\xa5\xeb\xffV\xb4\xcc\x0e}(F\xa2t\xc5\xe0\xb4R?\xd5:\x95\x10<\x04\xe0\xe8\r\x0eNUs\x8a\xe8H\xe7\x145 2\x01\xa0\xe8F\xc2\x0c\xa1 %\xcd\n\x1e\xf7\x10\xb8\xaf\x1e\xf0\x8c5\x7f\xf8\x96\xc8\xfaO+\x00\xec\x85;\xac\xb6\xec\xf5\x15\x85\xcf\xaf\xca\x9f\xed\xd0c\xb1\xe0\xd1>\xa1\x8e\xd2\x0c\xab\xbf\x95#z4\xdc\xd1\x01\xd7\x0f<\x00\xf0\x11\x028\x89\x00T\xcf%\xa5\x84\x93\xbd!\x01\xa0\xec\xa4\x10\x8c\xdd\x19\x8b\xba\x90\x88\xf8Xo\xcd\xde\x8b\x93\xbe\x9a7\x10]_tW\xe1\xfc\xf6\x1f7$\xcf\x7f\xe1\xf3\x925\x05V\x92}\x83\xc3<\xc6\x1bMR\xd1F\x07~\xef0\x84\x83!\x88\xa59\xf8\xfa\xdd\x07\x00\xca\xb1\n\x1e,\x8f(\xddS\x14$\x95rB=\xd1\x01\xfe\x8eK0\x83\x19\xb7X\xf7\xaa\xeb\xa4\xfe\xaa\x03\xae`\xe7\xb9\x9d\xb2\x18\xb90cKf\xcdX\xab\xb3dl\xd83\xa7\xf0\xbb\xbb\x96.Oc\xc8\x1d\xdf\xb0V\xdd\xb4\x1d\xb0)\xd0\x0b\x9f\xee\x9e\x0f\x8f\x1b\x17\xef\xf0\xb0\xff|X\x05 \xca\x8a \xadXvMF\x06:\x9b=\xd0\xfb\x9f\xc3\xde@\xc7\xa9\xbf\x08\xa1\xbe\xc3\xa43\xcf\x00@\x86m\xfe&\x9b%m\xf5\x91\xd4\xfc\x17_]R\x94F[bh\xe8\xc7\xad\x1b\x8b\xd4\x91.7%\tE\xd7\x12hS\xf3XT\x15O\xb2\x88\xf4\rR\x15\x13\x92\xcc\n\xf8\xce\xc6.\xe8\xab\xfdt8\xe0>}\x9c\x1bk\xdb\x87K\xf4N\xd7\xd5\x8ca\xcd\xdc\x90\x1c\x9b\xbaz\x7fr\xces\x9b\xf3\x8a\x17\x9b\x9cIzlP2\xf8\x03"\xf6\x03)\xfa\x86,N}\x07H\xdaNI\xcd\x7f\xf2@\x0c\x16\x9aX\xac\xa8\x13\x13\x1c\xb8\xef4\xcaC\r\xc7\x07\'z/\x9f\xe2\xfc\xed\x07\xf0\x81\x8e\x87\x85\xfd\xc80;\x8b\xe3\xcd\x8e\xa2\xd7\x13\xb2\xd6\xbc\x99\x9aW\xe2\xc8H\xb7A2\x02!\xd91\x1e\x92 \x8c{\xed\xc8$\x11\x9b\xa8\x88C\xa9\xfd\x06\x1a\x8cH5\xd9z\x8d\xf99\xf0\xde\x1f\xc4l\xa9\x88\xf8]\xe7\xeeOz\xab\x8e\n\xe1\x81\xe3\xd3=\x7f"\x002tf\x87\xded/(\x89\x99U\xf2\x8eeVAqR\xe6\xe2\xf8dG\x12X\xe3\r`\xb3\xe8\xb0\x9c\xd2\xf8\xcd\x80m\x1b[\xb7\x1f\xbf\tG\x03\x02\x04p\xb3\x12\x18\xf4\xc2h\xefm6\xe4\xa9\x1e\x9a\xf4V\xdf\xe2\x02\xae2I\x08]\xc3%\xff\xe77\xe2\x13?N\xc90\xc4e%\xe8bg-7$\xe4\xbcf\x8c\xcf.2\xda\xd2\x93\x0c\xb1)\x16\xc6@6XX\xf5\x04\x1e\xd3k\\d\x03\xfd\x11.\xd03\xce\xfa\xdbGX\x7f\xdbm14pAd\xc7*q\x89\xbe\'\xad\xff\x8d\x00\xa6\r\xdc\xae\x00\xd9\x0e\xa5\xe3\xcc\xc0\x99\x8a3Q[#\x88\xd3\xa7Q\xdc\x85\xd3\xf38\x8f\x1f\x1e\xff\x05\x19\x82\x1f"\xf6\x8fr\xf8\x00\x00\x00\x00IEND\xaeB`\x82'

    def getIconQuit(self):
        return \
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x06\x00\x00\x00szz\xf4\x00\x00\x08\xffIDATx\xda\x9dW\tpS\xd7\x15=\xffk\xb3d\xcb\xb2e\xcb\x96-y\x93\xf1\n\xc4\xd4\xa6\x80\xebN\xa7\xd0\xb4\xb4\xe9\xa4\x84%-\x13\n$\xa4)\t-%\xc3\x00CJ\xd3N\xda\x84!\tI\xbaL\x81\x0c\xad\xd9\xcc\x92\x02)!\xc0\x00\x13\xcaR\xd6\x04\x1b\x13S\xbc\xca\xd8x\x91\xbc\xca\xb2vk\xf9\xbd\xef\x0bd\x1b\x9b@\xfbf\xde\xfc\x99\xff\xdf\x7f\xf7\xdcs\xcf\xbd\xf7=\x0e\x8f9\x96\x02\xca\x10\x90\xcb\x01\xd3i~\x93\x07J\xe8\x99%\x00Nz\xff\x9f\x00\xf0\xb9\x1f\xb8\xec\x01n|\n\xb4\xd3/\xa1\xc7\xd9\x97{\x0c\xc3)\xf4x&-^\xbd\xce\xa8\x8d\xcdL\x8dS#1V\x05\x8dR\x81(\x99\x0c^\xbf\x1fv\x8f\x0f\xbd\x83nt\x0e8\xd0\xde?(4\xd9\x1cG\xdc\xc0\xd6:\xe0B\x03\xe0\xfb\xbf\x000\x8f\xe91/O\xaf\xdd\\\x98\xaa\xd3\x17\xa4&@\xaeP\x80W*\xc1G\xc7\x80WE\x83\x93+ \x0c\xf9\x10r\xbb\x10r9\x11\xf2x0\xe4\xf3\xa1\xb6\xb3\x0f\xb7;{p\xc3\xda\xff\xa9\r\xf8\xc3g@\xe5\xc3\x18\x19\x17\xc0\xf3\x801Q\xadz\xb38C\xbf\xb4$S\x0fEL\x0c\xa4\xbad\xd1\xf0\xa3\x06\x03\x12\xe8\xe9\x82\xcf\xe9De\x8b\x15W[,\xfd\xf5N\xcf\xfaS\xc0n\x8c\xc3\x067\x8e\xf1\t\x19\t\x9a\x9d\xa59\xc6\xb2<C\x12\xa4IzH4q\x8f+\x95\xc8\x08\xda\x07\x10\xe8\xb6\xa2\xbe\xa3\x1b\x97\x1a\xdb\xfd\xd7\xfa\xec\x1bO\x03\xef\xd0\'\xf7C\x010\xcf\xc9\xf8\x81\xefL2\x95\xa5\xeb\x13!\xcf\x9a\xf0?\x1b~p\x0c\xb5\x98\xd1f\xed\xc5\xe9\x1as\xe0b\x9f\xfd\x8d\xb3\xc0fz\xed\x1d\x03\x80\xc5\\\xa7Vm}rb\xd6\xd2\xfc\x8c\xd4Q\xc69Z\x15\x0cR\x08I\xf2\x12\t\xcf\x1e\x0f\x0fA(\x1cj\x9e\xe7\x87A\xdc\xbd\x83\xba\xe66\x1c\xbb\xd5\xec\xb8\xea\xf4\xac\xb8\x0e\xecg$=\x08`\xd1\xecI\xa6\x8a\xd2\xbc\x0c(r\xf2G\x18\xe7\x10\x1a\x1aBoT,x\x8eG\x82\xcf\x0eN"\x1d\x03B\x04\xe9\x1b\x823>\tQ\x01\x1f\x14\xaeA\x08RY\xe4\xbb\xaf\xb1\x0eW\xea[\xb1\xffVs\xddy\xca\xaaA\xa0>\x02\x80\xa5\x1a\xa9\xbdj\xfe\xd4|\xbd*-#\x12\xf3\xb0q\x1f\xba\x02<R\x97,\x07\xe42t\xed\xdf\x89D\x9f\x03<\xa5\xa0 \x08\xe2\xe4yZG\xc6\xbb\t\xa4\xf1\x95\xd5\xd0\xd8\xba\xd1\xbbw;\x84`\x10\x9cL\x16\xd1\x84\xbb\xad\x15\x87\xaf\xd7\xe1\xa8\xb5\x7f\xdbU`\r\xbdv\xdd\x07\xf0\xca\xdc\xe2\xbc-Sr3 \xcf\xcc\x8e\xc4&D9\xde\x15\xe0\x90\xb4\xf0\x05\x18f\x94\x8a\xef\xdb\xab*\xd1\x7f\xa8\x02:\xbfSd\x82-\x0c2\x86\x14\xb1\xd0\xff\xf4gH.\x9c(\xaes\x7fq\t\xf6\xc3{!\x84\x08\x84D\x12\xd1CuC+\xca\xab\xea[\x8f\x02O\xd3\xab\x1a\x8e\xc5\x9e\x8a\xcc\xed\xc5e\x933\xa3\xb3\xb2\xc5Tc\xc6Y\xcc{d*$\xcf\x7f\x0e)\xc5SG\xd1\xddy\xb3\x1a\xbd\x1f\xed\x82>\xe0F\x90b\xde%\x8bF\xca\xe2\x97"\xc6\x19+\x8c=_\xc3m\xd8\x18\x13^\xaa\x8f\xbc\x84R\xd4\x01\xd7\x1d3\xf6\\\xaa\xc1a\x9bcc-\xf0\x06\xb7\x18(*\xcb6T\xcf\x9e\x92\x1b\x89=\x03\x10 \xfa\xdcj-r^\xfe\x158]\xca\x18\xb1Yk\xbeD\xe7\x9e\xed\xe2Z\xe3\x8b\xbf\x84.//\xf2M\xb8\xb7\x87\xa7\xea\x1a\x06\xfe\xb9\x8f\\\xf71UF\xb4p\xaa\xba\x01\x15\xe6\x8e+\x17\x81\xf9\xdc\x12\xe0\xe7\x0bJ\xf2?,*0Af\xcc\x18eD"\x10})\xe9\xd0\xcc]\x04yz\xe6\x18\x10\xbdMMb\xfc\xb5\xa6\xeca\xe3\xf7\xbcw\xfd\xfb3\xd8?\xf9H4|?\x04l\xf8\xdb[q\xb3\xb6\x19\xdb*\xeb\xee\x9e\x00\x16\xb0\x10\xec^>\xb3x\xb113\x1d\xd2\xe4\x07<e"#\x1d\xc82L\xd0\xcc#\x10\x0f\x00\x1c3h=D\xe3g0x\xf4\x80\x08F\x04\xc0\xbc\xe7\xc2\x0c\x04m}hkh\xc2\x07g\xab\x06\x0f\x02\xcb\xb8\x17\xa8\x93\xady\xaa\xb4P\xe1v \xaa\xa8\x84j\xbd*\xb2\x91\x10\xf0\x8b?\x0b\x81\xa0(N\x06BfH\xffJ\xe3\xces\'1pp\x0f)8\x18\x0e\xa7L\x0e\x8ez\x08\'\x1d\xce\x86\xc1\xd6\x16l:q\xc5O\xab\xd6p\xcbH\xb0\x1b\xe6|K\xe9\xf9\xfc\x02\x19\x99\x80\xa8\x82IT\xf7\xf5\xe1=\xa9\xb1\x04Y>\xbb\\pSm\xc7\x84\xc90\xad\\-\xae\x1bo8\xce\x9fF\xcf\xbb\xbf\x13)g\xcd\x8a9\xc3\xb1\xe6\xa5PR\xe3\x92S\x8f\xb0\xc2[[\x03I\x92\x01o}rA(\x0762\x06\xba\x89\x01\x1dj\xae\x8b\x1e\xb3\x1a 3\xb0bT@\xc8\xa3H\xc1n\xear4\x1d\x0e\xd4U\xd6#\xf7\xc3\xbf\xc1\xf4\xfd\x1f\x8e\x0b\xa0\xe5\x1f\x15\xb0\xac}\x15\xc9\x05Y\xe0c\xd4\x94Qa\x10\x02\xa5\xa9\xdf\xda\x81\xa1;\x8d\x94\t.`\xf2T\xc6@\x80\x18x\x8fi\xe0,i\xe0\xdbqm\x8db\x9a\xdc\x1f,\x1d\xe5D\xb7$A\'\xb6];\xd5s\xe5K+\x91\xf3\xdc\xf3_)\x83\xe6\xf2\xadp\xfce3b\xd3\x92\xc5B\xc4b\x1e\xe8\xb2\x92\x13\xae{\xfb\xaa1\x90\x96\x83\xf7\xcfV9\x0f\x01oq\x8b\x80\xb7\x7fR\x92\xbf.\xd7? R4r\x84\xcb+`Q\xc4#}\xd3;\xc8#\xe3b\xf1y\x84\x10\xcd;\xb6\xc1\xb2a-\xe2\x02.\xd2\xc0\xe8\xcf,\xbc\r\xb28l\xa9\xac\xb3\x9c\x04\xd6s?\x06\xe6\xcc\xca6\x1c\x99\x95\xac\x12)\x8a0@\xc6\xa9\xce\xa0Q\xa6A\xc1\xf6r\x14\xcc\x997\xc6\x96\xeb\xea\x05\x91be\xd1\xd41\xdf\xcc\xfbw\xa1}\xd5\xcb\xd0R\xe3c\x98\xef\xf7\x0eyV\x0e\xfe\xd5\xe5\xc6\x0es\xc7\xedk\xc0/8\xaa\x87\xe9E\xf1\xea\x96E\xc5\x13\xb8\x90\xb9\x96\x84\xe7\x15\x8b\xc8\x10\x1d\xf0Z\xe2\x8d(\xdau\x00Y\xa5ec\x0c\x0c\x9e\xf8\x18\x96\xd7V\x80W\xc7\xc2\xf0\xa7\xddP\x95\xcc\x18\xb3\xa6\xf5\xf8\x11\x0c\xae\\\x02\x9e\x85\x96J\x01\xd3\x14\x9f]\x80\xbdUM\xd8ks\x9c\xb9\x03,g\xb6\xf8\x85\xc0\xa1\x85\xc5ys\x0b\xe0\x82\xdf\xd2\x1eN\x17\xca"\xab*\x11y\x7f\xdc\x82\x8c9\xcf\x8e\xda\xd8~\xec ,\xebW \xd0\xd9+f\x9frJ!\x0c\xef\x95CY<}\xd4:\xdb\x96M\xb0\xbc\xfd{jT\x1e\xb1\x0c\xc8R\x8c\xa8E4\xb6W\xd5\xf7\x1c\x07\xb6\xd1\x92Mb3\xfa\x11\xf0\xdd\x19z\xed\xe9g\n\x8c\x04\xdb\x1c\x11\x0c\x88\x05\xb7T\x89\x9c?oE\xdc\xb3K\xc3\xc6\x0f\xef\x81\xe57\xab\xe8\xb4c#qB\xe46D:Q\x95<\x01\xc3\xfb\xe5\x88z\xa2D\\\xd7\xf3\xee\xeb\xb0n|S\\\xc3\x91\xf7\xbc2\x1a\xc8\xc8\xc6\x91\xdav\x1c\xb0\xf6\xdf\xf8\x12XK\xcb\xce\x88\x00r\x01E\x11pp\xee$\xd3\xd3S\xd5<u\xad\xa6a7\x08\x04\x94j\xa4\xff\xbdBl\xb9\x9d\xab\x96\x89)\xc9)Xu\x0bGV`g\x15\xaf\x80\xe8i\xd3`\xd8\xbaO,\xc1\xd6\xdf\xbeN\x02\x0cED\xc8j\xc7uG\x08\xbbn5w\x9d\x03\xf6\x11\xe6\x8d\xf4\xba7r y\x12\xf8za\x8c\xf2\xe4S\x93L\xda,\xbf\x03\xfe\xce\xbb#\xf3A\xac\x0f\xac\xc0\x04)\x9e\x12\tY\xe4\xa9O\x90\xfb\xcc8;\xef\x86\x04R\x9aD\x0e\x896\x01!\xbb\x9d\xd69\xef\xd1\x13\x82,5\x1dwdj\x1c\xbd\xd5\xec=\xe5\xf4|a\x06~M\x1f/\x86w\x1e\x1e\xfcl\xe0\xc5i\t\x9a\xbf\xce\xca5\xcaR\x87F\x80\xa0\x00\xf2\n\xe2\x92\x8ec\xbc\xe0\xa3\xb2\x1a\x04/\x8dd\x1d\x9d\x1b\xe8\xc9&sW\x1a%\n\x88\x1d\xd7Y\x1d\x90\xa5\xa6\xa1S\xa1\xc1\x99\xba\xb6\xe0\xb1~\xfb\xedj\xe0\x03\xfa\xed\x00M\xcf\x83\x00\xd8P|\x0fxmz\x82fCY\x8eQj\xe2|TD,\xa2&\xc48\xb2\xf3\x87Lt4\x1c[>\\\xf2\t\x93X/\xd8)\x8f\x89\x97=Y\xccYsk\x16\x14\xb8\xd8\xd0\x1e<\xd9oo\xa4\xb3\xe0\x0e\xfa\xba\x93f\xf70\xb7c\x87j&\xb0zb\x8cr\xdd72S\xd4St1\x90\x0c\xda\x10\x18\xe8!\xd6)\xa7\xa3X:\x85A\x80\x00\x08\x81\xb0\xf1\x907\xccB\x88\x18\x90j\x12\x11\xd4hQ\xdd\xe3\xc4\xc5\x16\x8b\xf7\xb2\xd3\xd3H\x9eW\xd0\x1f{iv\x8c4\xf6\xb0\x9bQ\x14\x95\x96\x05\xd4\x9c7\x94\xea\xb5\xf9t3B\x9eN\ry`\x88D\xe9\x15+\x14\'Pn\x87\xecD{,M5\x04\x9e:\x9e"\x1a~\xa9\x02\xf5\xbd\x0e\xf1ft\xde\xda\xdfErn0\x87=?>\xd2\xf3G\x01`C\x12K\xfd\xaf\x10x5\t\xf8\xc1\xd7\x124\x19\xe9z-\xd2t\x89HL\xd2B\x13\x1b\x03\x05\xf5\x08\x9f\xd7\x0b\xbb}\x10\xdd=6tt\xf7\xa1\x95\x9e\x95}\xf6\x9e6:>\xd2\xb1\xf7\x1c\x91\xf31\xc2W3\xcfxF\x1ey9\xa5A\t\x0c\x13\x01Y\xa8\x03f\xc6\x03\x06\x9atE\x85\x92\xa2 e\xe1\xb7\xd3E\x83\xee\x80\x8e>\xaa=\x16j\x1dT\xe1.\xd3?t\xfa\xc6M\x96j_\xb5\xf9\xe3\x00\xb8?X\xd4\x13hR\xb5\x02;\x95\x18h\x129`\xf90@\xb3\x93&K\x1br\x1e\x84c\xf4\x15\xeca\xe3\xbfs\xb8\xaf\xb2\t\x17\x82\x17\x00\x00\x00\x00IEND\xaeB`\x82'


# --------------------------------------------------------------------------------------------------
# MainFrame
# --------------------------------------------------------------------------------------------------
class MainFrame(wx.Frame):

    images = ImageClass()
    MyPrint = MyPrint()
    MyExcelQC = MyExcelQC()
    CsvHandler = CsvHandler()

    DoINeedTime = True
    ExcelTestOnly = False
    data_tests = []

    def __init__(self, parent, title='Default GUI'):
        super(MainFrame, self).__init__(parent, title=title, size=(800, 600))
        # set icon for application
        try:
            icon = wx.Icon()
            data = self.images.getIconApp()
            self.MyPrint.debug(data)
            bytes_stream = io.BytesIO(data)
            self.MyPrint.debug(bytes_stream)
            image = wx.Image(bytes_stream)
            self.MyPrint.debug(image)
            icon.CopyFromBitmap(wx.Bitmap(image))
            self.SetIcon(icon)

        except Exception as e:
            self.MyPrint.error(e)
            pass
        # self.SetBackgroundColour('blue')
        # set minimum size
        self.SetSizeHints(wx.Size(800, 600), wx.DefaultSize)
        self.menu_bar_init()
        self.tool_bar_init()
        self.main_panel_init()
        self.statusBar = self.CreateStatusBar(1)
        self.Centre()
        self.Show()

    def menu_bar_init(self):

        # list menu
        menubar = wx.MenuBar()
        filem = wx.Menu()
        editm = wx.Menu()
        optionm = wx.Menu()
        windowm = wx.Menu()

        # list menu in file
        itemNew = wx.MenuItem(filem, wx.ID_ANY, "New",
                              wx.EmptyString, wx.ITEM_NORMAL)
        itemOpen = wx.MenuItem(filem, wx.ID_ANY, "Open",
                               wx.EmptyString, wx.ITEM_NORMAL)
        itemSave = wx.MenuItem(filem, wx.ID_ANY, "Save",
                               wx.EmptyString, wx.ITEM_NORMAL)
        itemSaveAs = wx.MenuItem(
            filem, wx.ID_ANY, "Save As...", wx.EmptyString, wx.ITEM_NORMAL)
        itemQuit = wx.MenuItem(filem, wx.ID_ANY, "Quit",
                               wx.EmptyString, wx.ITEM_NORMAL)
        filem.Append(itemNew)
        filem.Append(itemOpen)
        filem.AppendSeparator()
        filem.Append(itemSave)
        filem.Append(itemSaveAs)
        filem.AppendSeparator()
        filem.Append(itemQuit)

        # list menu in edit
        itemUndo = wx.MenuItem(editm, wx.ID_ANY, "Undo",
                               wx.EmptyString, wx.ITEM_NORMAL)
        itemRedo = wx.MenuItem(editm, wx.ID_ANY, "Redo",
                               wx.EmptyString, wx.ITEM_NORMAL)
        itemCut = wx.MenuItem(editm, wx.ID_ANY, "Cut",
                              wx.EmptyString, wx.ITEM_NORMAL)
        itemCopy = wx.MenuItem(editm, wx.ID_ANY, "Copy",
                               wx.EmptyString, wx.ITEM_NORMAL)
        itemPaste = wx.MenuItem(editm, wx.ID_ANY, "Paste",
                                wx.EmptyString, wx.ITEM_NORMAL)
        itemDelete = wx.MenuItem(
            editm, wx.ID_ANY, "Delete", wx.EmptyString, wx.ITEM_NORMAL)
        itemSelectAll = wx.MenuItem(
            editm, wx.ID_ANY, "Select All", wx.EmptyString, wx.ITEM_NORMAL)
        editm.Append(itemUndo)
        editm.Append(itemRedo)
        editm.AppendSeparator()
        editm.Append(itemCut)
        editm.Append(itemCopy)
        editm.Append(itemPaste)
        editm.Append(itemDelete)
        editm.Append(itemSelectAll)

        # list all menu in options
        itemMoreOptions = wx.MenuItem(optionm,
                                      wx.ID_ANY,
                                      "More Options",
                                      wx.EmptyString,
                                      wx.ITEM_NORMAL)
        itemHelp = wx.MenuItem(optionm, wx.ID_ANY, "Help",
                               wx.EmptyString, wx.ITEM_NORMAL)
        optionm.Append(itemMoreOptions)
        optionm.Append(itemHelp)

        # list all menu in window
        itemWindows = wx.MenuItem(
            windowm, wx.ID_ANY, "Windows...", wx.EmptyString, wx.ITEM_NORMAL)
        windowm.Append(itemWindows)

        # show menu
        menubar.Append(filem, '&File')
        menubar.Append(editm, '&Edit')
        menubar.Append(optionm, '&Options')
        menubar.Append(windowm, '&Window')
        self.SetMenuBar(menubar)

        # bind events on the menu
        self.Bind(wx.EVT_MENU, self.on_new, itemNew)

        self.Bind(wx.EVT_MENU, self.on_quit, itemQuit)

    def tool_bar_init(self):

        toolBar = self.CreateToolBar(wx.TB_HORIZONTAL, wx.ID_ANY)
        iconSize = (24, 24)
        toolBar.SetToolBitmapSize(iconSize)

        # toolNew = toolBar.AddLabelTool( wx.ID_ANY, u"New",
        # wx.Bitmap('icon\\new.png'), shortHelp="New" )
        icon = self.images.getIconNew()
        icon_stream = io.BytesIO(icon)
        toolNew = toolBar.AddTool(wx.ID_ANY, "New",
                                  bitmap=wx.Bitmap(wx.Image(icon_stream)),
                                  shortHelp="New")
        icon_stream.close()

        toolBar.AddSeparator()

        # toolSave = toolBar.AddLabelTool( wx.ID_ANY, u"Save",
        #  wx.Bitmap('icon\\save.png'), shortHelp="Save"  )
        icon = self.images.getIconSave()
        icon_stream = io.BytesIO(icon)
        toolSave = toolBar.AddTool(wx.ID_ANY, "Save",
                                   bitmap=wx.Bitmap(wx.Image(icon_stream)),
                                   shortHelp="Save")
        icon_stream.close()

        toolBar.AddSeparator()

        # toolClear = toolBar.AddLabelTool( wx.ID_ANY, u"Save",
        # wx.Bitmap('icon\\clear4.png'), shortHelp="Clear Logs" )
        icon = self.images.getIconClear()
        icon_stream = io.BytesIO(icon)
        toolClear = toolBar.AddTool(wx.ID_ANY, "Save",
                                    bitmap=wx.Bitmap(wx.Image(icon_stream)),
                                    shortHelp="Clear Logs")
        icon_stream.close()

        toolBar.AddSeparator()
        toolBar.AddSeparator()

        # toolHelp = toolBar.AddLabelTool( wx.ID_ANY, u"Help",
        #  wx.Bitmap('icon\\help.png'), shortHelp="Help"  )
        icon = self.images.getIconHelp()
        icon_stream = io.BytesIO(icon)
        toolHelp = toolBar.AddTool(wx.ID_ANY, "Help",
                                   bitmap=wx.Bitmap(wx.Image(icon_stream)),
                                   shortHelp="Help")
        icon_stream.close()

        toolBar.AddSeparator()
        # toolQuit = toolBar.AddLabelTool( wx.ID_ANY, u"Quit",
        # wx.Bitmap('icon\\quit.png'), shortHelp="Quit"  )
        icon = self.images.getIconQuit()
        icon_stream = io.BytesIO(icon)
        toolQuit = toolBar.AddTool(wx.ID_ANY, "Quit",
                                   bitmap=wx.Bitmap(wx.Image(icon_stream)),
                                   shortHelp="Quit")
        icon_stream.close()

        # del icon, icon_stream

        toolBar.Realize()

        # bind events on the tools
        self.Bind(wx.EVT_TOOL, self.on_quit, toolQuit)
        self.Bind(wx.EVT_MENU, self.on_save, toolSave)
        self.Bind(wx.EVT_TOOL, self.on_clear, toolClear)
        self.Bind(wx.EVT_MENU, self.on_help, toolHelp)
        self.Bind(wx.EVT_TOOL, self.on_new, toolNew)

    def main_panel_init(self):

        self.panel = wx.Panel(self)

        # font = wx.SystemSettings_GetFont(wx.SYS_SYSTEM_FONT)
        font = wx.Font(pointSize=12,
                       family=wx.FONTFAMILY_SCRIPT,
                       style=wx.FONTSTYLE_NORMAL,
                       weight=wx.FONTWEIGHT_BOLD)
        # btnfont = wx.Font(pixelSize = 10, wx.MODERN, wx.NORMAL, wx.BOLD)
        # toofont = wx.Font(pixelSize = 9, wx.MODERN, wx.SLANT , wx.BOLD)

        vbox = wx.BoxSizer(wx.VERTICAL)

        vbox.Add(wx.StaticLine(self.panel), 0, wx.ALL | wx.EXPAND, 0)

        hbox1 = wx.BoxSizer(wx.HORIZONTAL)
        self.sText1 = wx.StaticText(
            self.panel, label='Lable 0', size=(100, 20))
        self.sText1.SetFont(font)
        self.tCtrl1 = wx.TextCtrl(self.panel)
        self.btn1 = wx.Button(self.panel, label='...', size=(40, 23))
        fgs = wx.FlexGridSizer(1, 3, 0, 0)
        fgs.AddMany([(self.sText1, 1, wx.ALIGN_BOTTOM),
                     (self.tCtrl1, 1, wx.EXPAND),
                     (self.btn1, 1, wx.ALIGN_BOTTOM)])
        fgs.AddGrowableCol(1, 1)
        hbox1.Add(fgs, proportion=1, flag=wx.ALL | wx.EXPAND, border=2)
        vbox.Add(hbox1, flag=wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, border=2)
        vbox.Add((-1, 5))

        # hbox2 = wx.BoxSizer(wx.HORIZONTAL)
        # self.sText2 = wx.StaticText(self.panel, label='Label 1', size=(100, 20))
        # self.sText2.SetFont(font)
        # self.tCtrl2 = wx.TextCtrl(self.panel)
        # fgs2 = wx.FlexGridSizer(1, 2, 0, 0)
        # fgs2.AddMany([(self.sText2, 1, wx.ALIGN_BOTTOM), (self.tCtrl2, 1, wx.EXPAND)])
        # fgs2.AddGrowableCol(1, 1)
        # hbox2.Add(fgs2, proportion=1, flag=wx.ALL | wx.EXPAND, border=2)
        # vbox.Add(hbox2, flag=wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, border=2)
        # vbox.Add((-1, 5))

        hbox2 = wx.BoxSizer(wx.HORIZONTAL)
        self.sText2 = wx.StaticText(
            self.panel, label='Label 1', size=(100, 20))
        self.sText2.SetFont(font)
        self.tCtrl2 = wx.TextCtrl(self.panel)
        self.bnt_openfile = wx.Button(self.panel, label='...', size=(40, 23))
        fgs2 = wx.FlexGridSizer(1, 3, 0, 0)
        fgs2.AddMany([(self.sText2, 1, wx.ALIGN_BOTTOM), (self.tCtrl2, 1, wx.EXPAND),
                      (self.bnt_openfile, 1, wx.ALIGN_BOTTOM)])
        fgs2.AddGrowableCol(1, 1)
        hbox2.Add(fgs2, proportion=1, flag=wx.ALL | wx.EXPAND, border=2)
        vbox.Add(hbox2, flag=wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, border=2)
        vbox.Add((-1, 5))
        #
        # hbox3 = wx.BoxSizer(wx.HORIZONTAL)
        # self.sText3 = wx.StaticText(self.panel, label='Label 2', size=(100, 20))
        # self.sText3.SetFont(font)
        # self.tCtrl3 = wx.TextCtrl(self.panel)
        # fgs3 = wx.FlexGridSizer(1, 2, 0, 0)
        # fgs3.AddMany([(self.sText3, 1, wx.ALIGN_BOTTOM), (self.tCtrl3, 1, wx.EXPAND)])
        # fgs3.AddGrowableCol(1, 1)
        # hbox3.Add(fgs3, proportion=1, flag=wx.ALL | wx.EXPAND, border=2)
        # vbox.Add(hbox3, flag=wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, border=2)
        # vbox.Add((-1, 5))

        # hbox4 = wx.BoxSizer(wx.HORIZONTAL)
        # self.sText4 = wx.StaticText(self.panel, label='Label 3', size=(100, 20))
        # self.sText4.SetFont(font)
        # self.tCtrl4 = wx.TextCtrl(self.panel)
        # fgs4 = wx.FlexGridSizer(1, 2, 0, 0)
        # fgs4.AddMany([(self.sText4, 1, wx.ALIGN_BOTTOM), (self.tCtrl4, 1, wx.EXPAND)])
        # fgs4.AddGrowableCol(1, 1)
        # hbox4.Add(fgs4, proportion=1, flag=wx.ALL | wx.EXPAND, border=2)
        # vbox.Add(hbox4, flag=wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, border=2)
        # vbox.Add((-1, 5))

        hbox6 = wx.BoxSizer(wx.HORIZONTAL)
        self.btn2 = wx.Button(self.panel, label='Bnt2-Atlas', size=(70, 30))
        self.btn3 = wx.Button(self.panel, label='Bnt3-Excel', size=(70, 30))
        self.btn4 = wx.Button(self.panel, label='Bnt4-CSV', size=(70, 30))
        gs = wx.GridSizer(1, 5, 5, 5)
        gs.Add(self.btn2, 0, wx.EXPAND)
        gs.Add(self.btn3, 0, wx.EXPAND)
        gs.Add(self.btn4, 0, wx.EXPAND)
        # gs.Add(self.cblistSelect, 0, wx.LEFT | wx.RIGHT | wx.TOP | wx.ALIGN_BOTTOM)
        # gs.Add(self.cblistResult, 0, wx.LEFT | wx.RIGHT | wx.TOP | wx.ALIGN_BOTTOM)
        hbox6.Add(gs, proportion=1, flag=wx.ALL | wx.EXPAND, border=2)
        vbox.Add(hbox6, flag=wx.EXPAND | wx.LEFT | wx.RIGHT |
                 wx.TOP | wx.ALIGN_BOTTOM, border=2)
        vbox.Add((-1, 5))

        hbox_comboBox = wx.BoxSizer(wx.HORIZONTAL)
        self.listSelect = ['PASSED', 'FAILED',
                           'NO RUN', 'N/A', 'BLOCKED', 'ALL']
        self.listResult = ['FULL', 'Result Only', 'Excel tests', 'Time']
        self.cblistSelect = wx.ComboBox(self.panel,
                                        choices=self.listSelect,
                                        value=self.listSelect[-1],
                                        size=(100, 25),
                                        style=wx.CB_READONLY)
        self.cblistResult = wx.ComboBox(self.panel,
                                        choices=self.listResult,
                                        value=self.listResult[0],
                                        size=(100, 25),
                                        style=wx.CB_READONLY)
        gs_comboBox = wx.GridSizer(1, 8, 5, 5)
        gs_comboBox.Add(self.cblistSelect, 0, wx.LEFT | wx.RIGHT | wx.TOP |
                        wx.ALIGN_BOTTOM | wx.EXPAND)
        gs_comboBox.Add(self.cblistResult, 0, wx.LEFT | wx.RIGHT | wx.TOP |
                        wx.ALIGN_BOTTOM | wx.EXPAND)
        hbox_comboBox.Add(gs_comboBox, proportion=1,
                          flag=wx.ALL | wx.EXPAND, border=2)
        vbox.Add(hbox_comboBox, flag=wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP |
                 wx.ALIGN_BOTTOM | wx.EXPAND, border=2)
        vbox.Add((-1, 5))

        hbox7 = wx.BoxSizer(wx.HORIZONTAL)
        self.tCtrl7 = wx.TextCtrl(self.panel, size=(1000, 1000),
                                  style=(wx.TE_MULTILINE | wx.TE_READONLY |
                                         wx.TE_RICH2 | wx.EXPAND))
        fgs7 = wx.GridSizer(1, 1, 0, 0)
        fgs7.AddMany([(self.tCtrl7, 1, wx.EXPAND)])
        hbox7.Add(fgs7, proportion=1, flag=wx.ALL | wx.EXPAND, border=2)
        vbox.Add(hbox7, flag=wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, border=2)
        vbox.Add((-1, 5))

        self.panel.SetSizer(vbox)

        self.Bind(wx.EVT_BUTTON, self.btn1_event, self.btn1)
        self.Bind(wx.EVT_BUTTON, self.btn_openfile_event, self.bnt_openfile)
        self.Bind(wx.EVT_BUTTON, self.btn2_event, self.btn2)
        self.Bind(wx.EVT_BUTTON, self.btn3_event, self.btn3)
        self.Bind(wx.EVT_BUTTON, self.btn4_event, self.btn4)
        self.Bind(wx.EVT_COMBOBOX, self.cblistSelect_event, self.cblistSelect)
        self.Bind(wx.EVT_COMBOBOX, self.cblistResult_event, self.cblistResult)

    def get_print_status(self):
        status = self.cblistSelect.GetValue()
        if 'PASSED' == status:
            state = MY_STATUS_PASSED
        elif 'FAILED' == status:
            state = MY_STATUS_FAILED
        elif 'N/A' == status:
            state = MY_STATUS_NA
        elif 'NO RUN' == status:
            state = MY_STATUS_NO_RUN
        elif 'BLOCKED' == status:
            state = MY_STATUS_BLOCKED
        elif 'ALL' == status:
            state = MY_STATUS_ALL
        else:
            state = MY_STATUS_ORTHER
        return state

    def log_print(self, string_data):
        if self.DoINeedTime is True:
            self.MyPrint.debug(string_data)
            self.tCtrl7.AppendText("%s:      %s" % (time.strftime("%Y/%m/%d %H:%M:%S",
                                                                  time.localtime()), string_data))
        else:
            self.tCtrl7.AppendText("%s" % string_data)

    def my_print_text(self, data_string, color=MY_COLOR_BLACK):
        self.tCtrl7.SetDefaultStyle(wx.TextAttr(color))
        self.log_print(data_string)

    def my_print_status(self, data, status=16):
        for line in data:
            self.MyPrint.debug(line)
            if ("Passed" in line) and (status & MY_STATUS_PASSED):
                self.tCtrl7.SetDefaultStyle(wx.TextAttr(MY_COLOR_BLUE))
                self.log_print("%s\r\n" % line)
                # self.data_tests.append(line)
            elif ("Failed" in line) and (status & MY_STATUS_FAILED):
                self.tCtrl7.SetDefaultStyle(wx.TextAttr(MY_COLOR_RED))
                self.log_print("%s\r\n" % line)
                # self.data_tests.append(line)
            elif ("N/A" in line) and (status & MY_STATUS_NA):
                self.tCtrl7.SetDefaultStyle(wx.TextAttr(MY_COLOR_ORANGE))
                self.log_print("%s\r\n" % line)
                # self.data_tests.append(line)
            elif ("No Run" in line) and (status & MY_STATUS_NO_RUN):
                if self.ExcelTestOnly:
                    self.tCtrl7.SetDefaultStyle(wx.TextAttr(MY_COLOR_YELLOW))
                    self.log_print("%s\r\n" % line.split('\t')[1])
                else:
                    self.tCtrl7.SetDefaultStyle(wx.TextAttr(MY_COLOR_YELLOW))
                    self.log_print("%s\r\n" % line)
                    # self.data_tests.append(line)
            elif ("Blocked" in line) and (status & MY_STATUS_BLOCKED):
                self.tCtrl7.SetDefaultStyle(wx.TextAttr(MY_COLOR_VIOLET))
                self.log_print("%s\r\n" % line)
                # self.data_tests.append(line)
            elif status & MY_STATUS_ORTHER:
                self.tCtrl7.SetDefaultStyle(wx.TextAttr(MY_COLOR_BLACK))
                self.log_print("%s\r\n" % line)
                # self.data_tests.append(line)

    def pre_logs(self):
        self.tCtrl7.SetDefaultStyle(wx.TextAttr(wx.Colour(0, 51, 102)))
        self.tCtrl7.AppendText("\n\n\n\n")
        self.tCtrl7.AppendText(
            "# ----------------------------------------------------------------------------------\n")
        self.tCtrl7.AppendText("# START at %s\n" % time.strftime("%Y/%m/%d %H:%M:%S",
                                                                 time.localtime()))
        self.tCtrl7.AppendText(
            "# ----------------------------------------------------------------------------------\n")

    # --- Even ---
    def on_new(self, evt):
        pass

    def on_save(self, evt):
        pass

    def on_clear(self, evt):
        self.tCtrl7.Clear()
        pass

    def on_help(self, evt):
        pass

    def on_quit(self, evt):
        dial = wx.MessageDialog(None, 'Are you sure to quit?', 'Question',
                                wx.YES_NO | wx.ICON_EXCLAMATION)
        _response = dial.ShowModal()
        if _response == wx.ID_YES:
            self.Close(True)
        else:
            return 0

    def btn1_event(self, evt):
        # with wx.DirDialog(self, "Choose a directory:", style=wx.DD_DEFAULT_STYLE) as dirDialog:
        #     if dirDialog.ShowModal() == wx.ID_CANCEL:
        #         return  # the user changed their mind
        #     # Proceed loading the file chosen by the user
        #     pathname = dirDialog.GetPath()
        #     self.tCtrl1.Clear()
        #     self.tCtrl1.WriteText(str(pathname))
        with wx.FileDialog(self, "Open txt file",
                           wildcard="Excel files (*.txt)|*.txt|All file (*.*)|*.*",
                           style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return  # the user changed their mind
            # Proceed loading the file chosen by the user
            pathname = fileDialog.GetPath()
            self.tCtrl1.Clear()
            self.tCtrl1.WriteText(str(pathname))
        pass

    def btn_openfile_event(self, evt):
        with wx.FileDialog(self, "Open excel file",
                           wildcard="Excel files (*.xlsx)|*.xlsx|All file (*.*)|*.*",
                           style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return  # the user changed their mind
            # Proceed loading the file chosen by the user
            pathname = fileDialog.GetPath()
            self.tCtrl2.Clear()
            self.tCtrl2.WriteText(str(pathname))
        pass

    def btn2_event(self, evt):
        data = self.CsvHandler.read_atlas_results(self.tCtrl1.GetValue())
        if not self.DoINeedTime:
            for i in range(0, len(data)):
                data[i] = "%s\t%s" % (data[i].split(
                    '\t')[2], data[i].split('\t')[3])
                self.MyPrint.debug(data[i])
            pass
        self.pre_logs()
        if len(data) is 0:
            self.my_print_text("File is not available\n", MY_COLOR_RED)
            self.MyPrint.warn("File is not available")
        else:
            self.my_print_status(data, self.get_print_status())
        self.data_tests = data

    # open excel file
    def btn3_event(self, evt):
        if self.tCtrl2.GetValue() == "":
            self.MyPrint.debug("tCtrl2 is None")
            total_tests, data = self.MyExcelQC.open_excel_file()
        else:
            self.MyPrint.debug("tCtrl2 have value")
            total_tests, data = self.MyExcelQC.open_excel_file(
                self.tCtrl2.GetValue())

        # if self.ExcelTestOnly:
        #     for i in range(0, len(data)):
        #         data[i] = "%s" % data[i].split('\t')[1]
        #         self.MyPrint.debug(data[i])

        self.pre_logs()
        self.my_print_text("Total tests: %d\n" % total_tests, MY_COLOR_ORANGE)
        self.my_print_status(data, self.get_print_status())
        self.data_tests = data
        pass

    def btn4_event(self, evt):
        self.MyPrint.debug("Create data CSV file")
        with wx.FileDialog(self, "Open excel file",
                           wildcard="Csv files (*.csv)|*.csv|All file (*.*)|*.*",
                           style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return  # the user changed their mind
            # Proceed loading the file chosen by the user
            pathname = fileDialog.GetPath()
            self.MyPrint.debug("CSV file path: %s" % pathname)

            # TODO:
            if not os.path.exists(pathname):
                pass
            self.pre_logs()
            self.my_print_text("Create the CSV data to file: %s\n" %
                               pathname, MY_COLOR_ORANGE)
            self.my_print_text("List Data:\n", MY_COLOR_ORANGE)
            self.my_print_status(self.data_tests, self.get_print_status())
            self.CsvHandler.create_csv_no_header_from_list_data(
                self.data_tests, pathname)
        pass

    def cblistSelect_event(self, evt):
        # TODO: ---------------
        self.MyPrint.debug("Combo Box event received")

    def cblistResult_event(self, evt):
        self.MyPrint.debug("Result Combo Box event received")
        if "FULL" == self.cblistResult.GetValue():
            self.MyPrint.debug("Change to print full time")
            self.DoINeedTime = True
            self.ExcelTestOnly = False
        elif "Result Only" == self.cblistResult.GetValue():
            self.MyPrint.debug("Print result only")
            self.DoINeedTime = False
            self.ExcelTestOnly = False
        elif "Excel tests" == self.cblistResult.GetValue():
            self.MyPrint.debug("Print result only")
            self.DoINeedTime = False
            self.ExcelTestOnly = True
        else:
            self.MyPrint.debug("Invalid")


if __name__ == '__main__':
    app = wx.App()
    MainFrame(None)
    app.MainLoop()
